{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "WE WILL CARRY OUT THE FOLLOWING:\n",
        "\n",
        "1. We will conduct an exploratory data analysis, which will allow us to identify trends in the data.\n",
        "\n",
        "2. With the help of Machine Learning, we will train a prediction model that will enable us to predict the weight of the newborn based on the data we have.\n",
        "\n",
        "3. Publication and distribution of the results."
      ],
      "metadata": {
        "id": "ccHGrGA1sfa9"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Dr. Vinicio Calventi General Hospital\n",
        "\n",
        "The Dr. Vinicio Calventi General Hospital is a decentralized, self-managed public hospital, inaugurated on July 15, 2007.\n",
        "\n",
        "This hospital is directed by Dr. JosÃ© Alfredo Alfaro Pla, under a management model that prioritizes the right to health and the humanization of services for the benefit of users. It also ensures total and equal access to plans, programs, and services for disease prevention, health promotion, protection, treatment, and rehabilitation."
      ],
      "metadata": {
        "id": "F703Qxc1vFNK"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Dataset:\n",
        "https://hospitalcalventi.gob.do/transparencia/index.php/publicacion-portal-datos-abiertos"
      ],
      "metadata": {
        "id": "SXqCs1Y4o8rk"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## List of Column Information for the Dataset\n",
        "\n",
        "**1. FECHA:** Date of birth (format YYYY-MM-DD)\n",
        "\n",
        "**2. EDAD:** Age of the mother at the time of birth (years)\n",
        "\n",
        "**3. EDAD GESTACIONAL:** Duration of the pregnancy (weeks)\n",
        "\n",
        "**4. PROCEDIMIENTOS:** Type of birth (cesarean or natural birth) (CESAREAN, EUTOCIC BIRTH)\n",
        "\n",
        "**5. GEMELAR:** Indicator of whether the birth was a twin birth or not\n",
        "\n",
        "**6. VIVI/MUERTO:** Vital status of the newborn at birth (alive or dead)\n",
        "\n",
        "**7. SEXO:** Sex of the newborn (male or female)\n",
        "\n",
        "**8. PESO:** Weight of the newborn at birth (pounds)\n",
        "\n",
        "**9. GESTA:** Number of previous pregnancies the mother has had\n",
        "\n",
        "**10. NACIONALIDAD:** Nationality of the mother\n",
        "\n",
        "In the obstetric context, \"gravida\" refers to the total number of pregnancies a woman has had, regardless of the outcome. This includes pregnancies that ended in births, spontaneous or induced abortions, and ectopic pregnancies."
      ],
      "metadata": {
        "id": "T6NHXkkH3vYj"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 1. Proceso de ETL"
      ],
      "metadata": {
        "id": "O_8jLykgpChB"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "IMPORT frameworks"
      ],
      "metadata": {
        "id": "qe3JKQ2fsL82"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%pip install lazypredict"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "R-EM-0wD5GgQ",
        "outputId": "bc7dddeb-cc7a-4e9f-867e-bff5eec82127"
      },
      "execution_count": 141,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: lazypredict in /usr/local/lib/python3.10/dist-packages (0.2.12)\n",
            "Requirement already satisfied: click in /usr/local/lib/python3.10/dist-packages (from lazypredict) (8.1.7)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (from lazypredict) (1.2.2)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (from lazypredict) (2.0.3)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from lazypredict) (4.66.4)\n",
            "Requirement already satisfied: joblib in /usr/local/lib/python3.10/dist-packages (from lazypredict) (1.4.2)\n",
            "Requirement already satisfied: lightgbm in /usr/local/lib/python3.10/dist-packages (from lazypredict) (4.1.0)\n",
            "Requirement already satisfied: xgboost in /usr/local/lib/python3.10/dist-packages (from lazypredict) (2.0.3)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from lightgbm->lazypredict) (1.25.2)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from lightgbm->lazypredict) (1.11.4)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas->lazypredict) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas->lazypredict) (2023.4)\n",
            "Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas->lazypredict) (2024.1)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->lazypredict) (3.5.0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas->lazypredict) (1.16.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('content/')\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import classification_report,roc_curve\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.pipeline import make_pipeline\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.ensemble import RandomForestClassifier, BaggingClassifier\n",
        "from sklearn.metrics import roc_auc_score, RocCurveDisplay, classification_report, precision_score, recall_score, accuracy_score, confusion_matrix, ConfusionMatrixDisplay, RocCurveDisplay\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from imblearn.over_sampling import RandomOverSampler, SMOTE\n",
        "from collections import Counter\n",
        "import plotly.graph_objects as go\n",
        "import pandas as pd\n",
        "from lazypredict.Supervised import LazyClassifier"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xW0wD_iKpIzB",
        "outputId": "3a5622a6-4ba6-41e0-ebb4-2f34d46dd5cb"
      },
      "execution_count": 142,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at content/; to attempt to forcibly remount, call drive.mount(\"content/\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df0 = pd.read_excel('/content/content/MyDrive/0 Colab Notebooks/PORTAFOLIO PERSONAL/PARTOS EN ADOLESCENTES 2019 - 2023/DATASET/PARTOS EN ADOLESCENTES 2019 - 2023.xlsx')\n",
        "df0.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WnGKPpS2T978",
        "outputId": "45ab6750-ba12-4366-d769-2a0dcfc0192d"
      },
      "execution_count": 143,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 5786 entries, 0 to 5785\n",
            "Data columns (total 10 columns):\n",
            " #   Column            Non-Null Count  Dtype         \n",
            "---  ------            --------------  -----         \n",
            " 0   FECHA             5786 non-null   datetime64[ns]\n",
            " 1   EDAD              5786 non-null   int64         \n",
            " 2   EDAD GESTACIONAL  5786 non-null   float64       \n",
            " 3   PROCEDIMIENTOS    5786 non-null   object        \n",
            " 4   GEMELAR           5786 non-null   object        \n",
            " 5   VIVI/MUERTO       5786 non-null   object        \n",
            " 6   SEXO              5786 non-null   object        \n",
            " 7   PESO              5786 non-null   object        \n",
            " 8   GESTA             5785 non-null   object        \n",
            " 9   NACIONALIDAD      5786 non-null   object        \n",
            "dtypes: datetime64[ns](1), float64(1), int64(1), object(7)\n",
            "memory usage: 452.2+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_excel('/content/content/MyDrive/0 Colab Notebooks/PORTAFOLIO PERSONAL/PARTOS EN ADOLESCENTES 2019 - 2023/DATASET/PARTOS EN ADOLESCENTES 2019 - 2023.xlsx')\n",
        "df.head()"
      ],
      "metadata": {
        "id": "awG7jXt3sPwt",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 330
        },
        "outputId": "20941898-766d-4938-d8e1-72298b3f2d3b"
      },
      "execution_count": 144,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       FECHA  EDAD  EDAD GESTACIONAL  PROCEDIMIENTOS GEMELAR VIVI/MUERTO SEXO  \\\n",
              "0 2019-01-05    17             38.00         CESAREA      NO        VIVO    F   \n",
              "1 2019-01-06    16             37.00         CESAREA      NO        VIVO    M   \n",
              "2 2019-01-06    19             38.00  PARTO EUTOCICO      NO        VIVO    F   \n",
              "3 2019-01-06    16             38.00  PARTO EUTOCICO      NO        VIVO    M   \n",
              "4 2019-01-07    18             37.00         CESAREA      NO        VIVO    F   \n",
              "\n",
              "  PESO GESTA NACIONALIDAD  \n",
              "0 3.10     2   DOMINICANA  \n",
              "1 2.80     1   DOMINICANA  \n",
              "2 2.40     2   DOMINICANA  \n",
              "3 3.90     2   DOMINICANA  \n",
              "4    3     2   DOMINICANA  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b6e02343-54db-4eb0-b0f7-18c0d87ceffe\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>FECHA</th>\n",
              "      <th>EDAD</th>\n",
              "      <th>EDAD GESTACIONAL</th>\n",
              "      <th>PROCEDIMIENTOS</th>\n",
              "      <th>GEMELAR</th>\n",
              "      <th>VIVI/MUERTO</th>\n",
              "      <th>SEXO</th>\n",
              "      <th>PESO</th>\n",
              "      <th>GESTA</th>\n",
              "      <th>NACIONALIDAD</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2019-01-05</td>\n",
              "      <td>17</td>\n",
              "      <td>38.00</td>\n",
              "      <td>CESAREA</td>\n",
              "      <td>NO</td>\n",
              "      <td>VIVO</td>\n",
              "      <td>F</td>\n",
              "      <td>3.10</td>\n",
              "      <td>2</td>\n",
              "      <td>DOMINICANA</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2019-01-06</td>\n",
              "      <td>16</td>\n",
              "      <td>37.00</td>\n",
              "      <td>CESAREA</td>\n",
              "      <td>NO</td>\n",
              "      <td>VIVO</td>\n",
              "      <td>M</td>\n",
              "      <td>2.80</td>\n",
              "      <td>1</td>\n",
              "      <td>DOMINICANA</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2019-01-06</td>\n",
              "      <td>19</td>\n",
              "      <td>38.00</td>\n",
              "      <td>PARTO EUTOCICO</td>\n",
              "      <td>NO</td>\n",
              "      <td>VIVO</td>\n",
              "      <td>F</td>\n",
              "      <td>2.40</td>\n",
              "      <td>2</td>\n",
              "      <td>DOMINICANA</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2019-01-06</td>\n",
              "      <td>16</td>\n",
              "      <td>38.00</td>\n",
              "      <td>PARTO EUTOCICO</td>\n",
              "      <td>NO</td>\n",
              "      <td>VIVO</td>\n",
              "      <td>M</td>\n",
              "      <td>3.90</td>\n",
              "      <td>2</td>\n",
              "      <td>DOMINICANA</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2019-01-07</td>\n",
              "      <td>18</td>\n",
              "      <td>37.00</td>\n",
              "      <td>CESAREA</td>\n",
              "      <td>NO</td>\n",
              "      <td>VIVO</td>\n",
              "      <td>F</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>DOMINICANA</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b6e02343-54db-4eb0-b0f7-18c0d87ceffe')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b6e02343-54db-4eb0-b0f7-18c0d87ceffe button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b6e02343-54db-4eb0-b0f7-18c0d87ceffe');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2fed3dc6-b3cd-4279-941c-aaad11966514\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2fed3dc6-b3cd-4279-941c-aaad11966514')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2fed3dc6-b3cd-4279-941c-aaad11966514 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 5786,\n  \"fields\": [\n    {\n      \"column\": \"FECHA\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"1900-01-14 00:00:00\",\n        \"max\": \"2023-12-27 00:00:00\",\n        \"num_unique_values\": 1295,\n        \"samples\": [\n          \"2021-09-03 00:00:00\",\n          \"2020-03-25 00:00:00\",\n          \"2021-09-08 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"EDAD\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7,\n        \"min\": 1,\n        \"max\": 250,\n        \"num_unique_values\": 41,\n        \"samples\": [\n          32,\n          40,\n          26\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"EDAD GESTACIONAL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 52.05960394231618,\n        \"min\": 0.0,\n        \"max\": 3940.0,\n        \"num_unique_values\": 67,\n        \"samples\": [\n          38.1,\n          33.0,\n          18.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PROCEDIMIENTOS\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 24,\n        \"samples\": [\n          \"PARTO EUTOPICO \",\n          \"PARTO VAGINAL\",\n          \"CESAREA\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GEMELAR\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"NO\",\n          \"SI\",\n          \"si\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"VIVI/MUERTO\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"VIVO\",\n          \"MUERTO\",\n          \"NO\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SEXO\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"F\",\n          \"M\",\n          \"MF\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PESO\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 85,\n        \"samples\": [\n          10.7,\n          3.1,\n          3.15\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GESTA\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 20,\n        \"samples\": [\n          2,\n          36,\n          14\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NACIONALIDAD\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"HAITIANA\",\n          \"COLOMBIANA\",\n          \"DOMINICANA\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 144
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EkwmgIBqxRIx",
        "outputId": "e4cf7840-8f3f-4f7b-a45b-a515d95c13ab"
      },
      "execution_count": 145,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 5786 entries, 0 to 5785\n",
            "Data columns (total 10 columns):\n",
            " #   Column            Non-Null Count  Dtype         \n",
            "---  ------            --------------  -----         \n",
            " 0   FECHA             5786 non-null   datetime64[ns]\n",
            " 1   EDAD              5786 non-null   int64         \n",
            " 2   EDAD GESTACIONAL  5786 non-null   float64       \n",
            " 3   PROCEDIMIENTOS    5786 non-null   object        \n",
            " 4   GEMELAR           5786 non-null   object        \n",
            " 5   VIVI/MUERTO       5786 non-null   object        \n",
            " 6   SEXO              5786 non-null   object        \n",
            " 7   PESO              5786 non-null   object        \n",
            " 8   GESTA             5785 non-null   object        \n",
            " 9   NACIONALIDAD      5786 non-null   object        \n",
            "dtypes: datetime64[ns](1), float64(1), int64(1), object(7)\n",
            "memory usage: 452.2+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['EDAD'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ehm7MwtLzKC5",
        "outputId": "a230a40b-0149-4274-9388-369c92e45349"
      },
      "execution_count": 146,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "EDAD\n",
              "18     596\n",
              "19     591\n",
              "17     483\n",
              "20     370\n",
              "21     318\n",
              "23     314\n",
              "25     300\n",
              "16     280\n",
              "24     270\n",
              "22     251\n",
              "26     222\n",
              "27     219\n",
              "29     195\n",
              "28     187\n",
              "30     166\n",
              "15     131\n",
              "31     130\n",
              "32     118\n",
              "33     104\n",
              "35      92\n",
              "34      77\n",
              "36      63\n",
              "38      55\n",
              "14      55\n",
              "37      55\n",
              "39      51\n",
              "40      29\n",
              "13      16\n",
              "41      15\n",
              "42       9\n",
              "43       7\n",
              "12       4\n",
              "44       3\n",
              "46       2\n",
              "11       2\n",
              "1        1\n",
              "49       1\n",
              "244      1\n",
              "250      1\n",
              "169      1\n",
              "45       1\n",
              "Name: count, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 146
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "We found that there are values within the normal age range, such as 1, 244, 250, and 169. Since there is only one value for each and they are not representative in our analysis, we proceeded to remove them."
      ],
      "metadata": {
        "id": "2Xthzyxu0gRh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "valores_a_eliminar = [1, 244, 250, 169]\n",
        "df = df[~df['EDAD'].isin(valores_a_eliminar)]"
      ],
      "metadata": {
        "id": "OKjy2v8A0c3n"
      },
      "execution_count": 147,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['EDAD GESTACIONAL'].value_counts(100)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pyWMokPVybYK",
        "outputId": "e5431669-f4ae-421f-ff36-c52a1fd148d4"
      },
      "execution_count": 148,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "EDAD GESTACIONAL\n",
              "39.00     0.35\n",
              "38.00     0.25\n",
              "40.00     0.17\n",
              "37.00     0.09\n",
              "41.00     0.04\n",
              "          ... \n",
              "50.00     0.00\n",
              "3940.00   0.00\n",
              "35.30     0.00\n",
              "41.80     0.00\n",
              "37.60     0.00\n",
              "Name: proportion, Length: 67, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 148
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 574
        },
        "id": "pnIruzyR1Dyk",
        "outputId": "17b3face-4f4d-4db4-d4be-6a6f93a27856"
      },
      "execution_count": 149,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       FECHA  EDAD  EDAD GESTACIONAL  PROCEDIMIENTOS GEMELAR VIVI/MUERTO SEXO  \\\n",
              "0 2019-01-05    17             38.00         CESAREA      NO        VIVO    F   \n",
              "1 2019-01-06    16             37.00         CESAREA      NO        VIVO    M   \n",
              "2 2019-01-06    19             38.00  PARTO EUTOCICO      NO        VIVO    F   \n",
              "3 2019-01-06    16             38.00  PARTO EUTOCICO      NO        VIVO    M   \n",
              "4 2019-01-07    18             37.00         CESAREA      NO        VIVO    F   \n",
              "5 2019-01-08    15             40.00  PARTO EUTOCICO      NO        VIVO    M   \n",
              "6 2019-01-08    15             40.00  PARTO EUTOCICO      NO        VIVO    M   \n",
              "7 2019-01-09    18             39.00         CESAREA      NO        VIVO    F   \n",
              "8 2019-01-09    17             39.00  PARTO EUTOCICO      NO        VIVO    F   \n",
              "9 2019-01-11    17             38.00         CESAREA      NO        VIVO    M   \n",
              "\n",
              "  PESO GESTA NACIONALIDAD  \n",
              "0 3.10     2   DOMINICANA  \n",
              "1 2.80     1   DOMINICANA  \n",
              "2 2.40     2   DOMINICANA  \n",
              "3 3.90     2   DOMINICANA  \n",
              "4    3     2   DOMINICANA  \n",
              "5 3.20     1   DOMINICANA  \n",
              "6 3.10     1   DOMINICANA  \n",
              "7 3.10     1   DOMINICANA  \n",
              "8 3.10     3   DOMINICANA  \n",
              "9 3.30     1   DOMINICANA  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-704d570a-7d0e-4ff8-a365-4092e009a18e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>FECHA</th>\n",
              "      <th>EDAD</th>\n",
              "      <th>EDAD GESTACIONAL</th>\n",
              "      <th>PROCEDIMIENTOS</th>\n",
              "      <th>GEMELAR</th>\n",
              "      <th>VIVI/MUERTO</th>\n",
              "      <th>SEXO</th>\n",
              "      <th>PESO</th>\n",
              "      <th>GESTA</th>\n",
              "      <th>NACIONALIDAD</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2019-01-05</td>\n",
              "      <td>17</td>\n",
              "      <td>38.00</td>\n",
              "      <td>CESAREA</td>\n",
              "      <td>NO</td>\n",
              "      <td>VIVO</td>\n",
              "      <td>F</td>\n",
              "      <td>3.10</td>\n",
              "      <td>2</td>\n",
              "      <td>DOMINICANA</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2019-01-06</td>\n",
              "      <td>16</td>\n",
              "      <td>37.00</td>\n",
              "      <td>CESAREA</td>\n",
              "      <td>NO</td>\n",
              "      <td>VIVO</td>\n",
              "      <td>M</td>\n",
              "      <td>2.80</td>\n",
              "      <td>1</td>\n",
              "      <td>DOMINICANA</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2019-01-06</td>\n",
              "      <td>19</td>\n",
              "      <td>38.00</td>\n",
              "      <td>PARTO EUTOCICO</td>\n",
              "      <td>NO</td>\n",
              "      <td>VIVO</td>\n",
              "      <td>F</td>\n",
              "      <td>2.40</td>\n",
              "      <td>2</td>\n",
              "      <td>DOMINICANA</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2019-01-06</td>\n",
              "      <td>16</td>\n",
              "      <td>38.00</td>\n",
              "      <td>PARTO EUTOCICO</td>\n",
              "      <td>NO</td>\n",
              "      <td>VIVO</td>\n",
              "      <td>M</td>\n",
              "      <td>3.90</td>\n",
              "      <td>2</td>\n",
              "      <td>DOMINICANA</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2019-01-07</td>\n",
              "      <td>18</td>\n",
              "      <td>37.00</td>\n",
              "      <td>CESAREA</td>\n",
              "      <td>NO</td>\n",
              "      <td>VIVO</td>\n",
              "      <td>F</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>DOMINICANA</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>2019-01-08</td>\n",
              "      <td>15</td>\n",
              "      <td>40.00</td>\n",
              "      <td>PARTO EUTOCICO</td>\n",
              "      <td>NO</td>\n",
              "      <td>VIVO</td>\n",
              "      <td>M</td>\n",
              "      <td>3.20</td>\n",
              "      <td>1</td>\n",
              "      <td>DOMINICANA</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>2019-01-08</td>\n",
              "      <td>15</td>\n",
              "      <td>40.00</td>\n",
              "      <td>PARTO EUTOCICO</td>\n",
              "      <td>NO</td>\n",
              "      <td>VIVO</td>\n",
              "      <td>M</td>\n",
              "      <td>3.10</td>\n",
              "      <td>1</td>\n",
              "      <td>DOMINICANA</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>2019-01-09</td>\n",
              "      <td>18</td>\n",
              "      <td>39.00</td>\n",
              "      <td>CESAREA</td>\n",
              "      <td>NO</td>\n",
              "      <td>VIVO</td>\n",
              "      <td>F</td>\n",
              "      <td>3.10</td>\n",
              "      <td>1</td>\n",
              "      <td>DOMINICANA</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>2019-01-09</td>\n",
              "      <td>17</td>\n",
              "      <td>39.00</td>\n",
              "      <td>PARTO EUTOCICO</td>\n",
              "      <td>NO</td>\n",
              "      <td>VIVO</td>\n",
              "      <td>F</td>\n",
              "      <td>3.10</td>\n",
              "      <td>3</td>\n",
              "      <td>DOMINICANA</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>2019-01-11</td>\n",
              "      <td>17</td>\n",
              "      <td>38.00</td>\n",
              "      <td>CESAREA</td>\n",
              "      <td>NO</td>\n",
              "      <td>VIVO</td>\n",
              "      <td>M</td>\n",
              "      <td>3.30</td>\n",
              "      <td>1</td>\n",
              "      <td>DOMINICANA</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-704d570a-7d0e-4ff8-a365-4092e009a18e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-704d570a-7d0e-4ff8-a365-4092e009a18e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-704d570a-7d0e-4ff8-a365-4092e009a18e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b12773b6-4a63-41b3-8d25-c1e0c15ad1ec\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b12773b6-4a63-41b3-8d25-c1e0c15ad1ec')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b12773b6-4a63-41b3-8d25-c1e0c15ad1ec button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 5782,\n  \"fields\": [\n    {\n      \"column\": \"FECHA\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"1900-01-14 00:00:00\",\n        \"max\": \"2023-12-27 00:00:00\",\n        \"num_unique_values\": 1295,\n        \"samples\": [\n          \"2021-09-03 00:00:00\",\n          \"2020-03-25 00:00:00\",\n          \"2021-09-08 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"EDAD\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6,\n        \"min\": 11,\n        \"max\": 49,\n        \"num_unique_values\": 37,\n        \"samples\": [\n          36,\n          40,\n          15\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"EDAD GESTACIONAL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 52.077609218067614,\n        \"min\": 0.0,\n        \"max\": 3940.0,\n        \"num_unique_values\": 67,\n        \"samples\": [\n          38.1,\n          33.0,\n          18.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PROCEDIMIENTOS\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 24,\n        \"samples\": [\n          \"PARTO EUTOPICO \",\n          \"PARTO VAGINAL\",\n          \"CESAREA\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GEMELAR\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"NO\",\n          \"SI\",\n          \"si\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"VIVI/MUERTO\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"VIVO\",\n          \"MUERTO\",\n          \"NO\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SEXO\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"F\",\n          \"M\",\n          \"MF\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PESO\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 85,\n        \"samples\": [\n          10.7,\n          3.1,\n          3.15\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GESTA\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 20,\n        \"samples\": [\n          2,\n          36,\n          14\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NACIONALIDAD\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"HAITIANA\",\n          \"COLOMBIANA\",\n          \"DOMINICANA\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 149
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "In the data, there are gestational age values both less than 15 and greater than 50. Although these are very extreme values with low probability of viability, we will remove them from the dataset as they are likely errors and not representative."
      ],
      "metadata": {
        "id": "8z3yG9Nx_En3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "valores_extremos = df[(df['EDAD GESTACIONAL'] < 24) | (df['EDAD GESTACIONAL'] > 42)]\n",
        "print(valores_extremos)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "G2NCbAcz18ZL",
        "outputId": "e449fdcb-6670-4835-8042-b86ae8c3e7c4"
      },
      "execution_count": 150,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "          FECHA  EDAD  EDAD GESTACIONAL  PROCEDIMIENTOS GEMELAR VIVI/MUERTO  \\\n",
            "12   2019-01-13    18             18.00         CESAREA      NO        VIVO   \n",
            "13   2019-01-13    18             18.00  PARTO EUTOCICO      NO        VIVO   \n",
            "14   2019-01-14    15             15.00  PARTO EUTOCICO      NO        VIVO   \n",
            "15   2019-01-14    18             18.00  PARTO EUTOCICO      NO        VIVO   \n",
            "16   2019-01-15    17             17.00  PARTO EUTOCICO      NO        VIVO   \n",
            "18   2019-01-16    16             18.00         CESAREA      NO        VIVO   \n",
            "45   2019-02-05    18              3.00         CESAREA      NO        VIVO   \n",
            "195  2019-06-19    17             17.00         CESAREA      NO        VIVO   \n",
            "196  2019-06-19    17             17.00         CESAREA      NO        VIVO   \n",
            "743  2020-03-23    25              3.00         CESAREA      NO        VIVO   \n",
            "861  2020-04-22    37             46.00  PARTO EUTOCICO      NO        VIVO   \n",
            "910  2020-05-01    20             18.00         CESAREA      NO        VIVO   \n",
            "919  2020-05-02    19            440.00  PARTO EUTOCICO      NO        VIVO   \n",
            "980  2020-05-14    35             20.00         CESAREA      NO        VIVO   \n",
            "1228 2020-06-30    19             19.00         CESAREA      NO        VIVO   \n",
            "1867 2020-09-25    21              4.00  PARTO EUTOCICO      NO        VIVO   \n",
            "1906 2020-10-01    17              0.39         CESAREA      NO        VIVO   \n",
            "1972 2020-10-09    28             23.00  PARTO EUTOCICO      NO      MUERTO   \n",
            "1981 2020-10-11    33              3.00  PARTO EUTOCICO      NO        VIVO   \n",
            "2021 2020-10-16    24            399.00         CESAREA      NO        VIVO   \n",
            "2302 2020-11-16    25              4.00         CESAREA      NO        VIVO   \n",
            "2345 2020-11-21    20             48.00         CESAREA      NO        VIVO   \n",
            "2393 2020-11-27    19             19.00         CESAREA      NO        VIVO   \n",
            "2394 2020-11-27    20             20.00         CESAREA      NO        VIVO   \n",
            "2474 2020-12-07    41              0.00         CESAREA      NO        VIVO   \n",
            "2608 2020-12-26    18            399.00  PARTO EUTOCICO      NO        VIVO   \n",
            "3536 2021-06-01    22             22.00         CESAREA      NO        VIVO   \n",
            "3539 2021-06-01    22             22.00  PARTO EUTOCICO      NO        VIVO   \n",
            "3544 2021-06-01    20             21.00         CESAREA      NO        VIVO   \n",
            "3548 2021-06-01    22             22.00  PARTO EUTOCICO      NO        VIVO   \n",
            "3723 2021-07-02    19             22.00  PARTO EUTOCICO      NO        VIVO   \n",
            "4212 2021-09-07    20             20.00  PARTO EUTOCICO      NO        VIVO   \n",
            "4399 2021-09-29    24             49.00         CESAREA      NO        VIVO   \n",
            "4626 2021-10-28    23             50.00         CESAREA      NO        VIVO   \n",
            "4874 2021-11-26    38           3940.00  PARTO EUTOCICO      NO        VIVO   \n",
            "5619 2023-07-20    17             23.00         CESAREA      NO        VIVO   \n",
            "\n",
            "     SEXO PESO GESTA NACIONALIDAD  \n",
            "12      M 3.50     1   DOMINICANA  \n",
            "13      M 3.40     1   DOMINICANA  \n",
            "14      M 2.90     2   DOMINICANA  \n",
            "15      M 2.70     1   DOMINICANA  \n",
            "16      M 3.50     2   DOMINICANA  \n",
            "18      F 2.70     1   DOMINICANA  \n",
            "45      F 3.60     1   DOMINICANA  \n",
            "195     M 3.80     1   DOMINICANA  \n",
            "196     F 2.80     3   DOMINICANA  \n",
            "743     M 3.20     1   DOMINICANA  \n",
            "861     F 3.40     5   DOMINICANA  \n",
            "910     F 3.50     2   DOMINICANA  \n",
            "919     F 3.50     2   DOMINICANA  \n",
            "980     M    4     6   DOMINICANA  \n",
            "1228    F 2.40     1   DOMINICANA  \n",
            "1867    F 3.20     1   DOMINICANA  \n",
            "1906    M 2.90     1   DOMINICANA  \n",
            "1972    M 1.20     2     HAITIANA  \n",
            "1981    F    3     2   DOMINICANA  \n",
            "2021    M 3.40     2   DOMINICANA  \n",
            "2302    M    1     1   DOMINICANA  \n",
            "2345    F 3.50     2   DOMINICANA  \n",
            "2393    M 3.20     3   DOMINICANA  \n",
            "2394    M 2.70     2   DOMINICANA  \n",
            "2474    M 2.90     3   DOMINICANA  \n",
            "2608    F    3     1   DOMINICANA  \n",
            "3536    M 3.40   S/N   DOMINICANA  \n",
            "3539    M    3   S/N   DOMINICANA  \n",
            "3544    M    4   S/N   DOMINICANA  \n",
            "3548    F 2.70   S/N   DOMINICANA  \n",
            "3723    M 1.20   S/N   DOMINICANA  \n",
            "4212    M 3.70   S/N   DOMINICANA  \n",
            "4399    F    3   S/N   DOMINICANA  \n",
            "4626    F 3.70   S/N   DOMINICANA  \n",
            "4874    F 3.20   S/N   DOMINICANA  \n",
            "5619    F 0.70     1   DOMINICANA  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = df.drop(valores_extremos.index)"
      ],
      "metadata": {
        "id": "aRBy8zBg_-Yn"
      },
      "execution_count": 151,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['PROCEDIMIENTOS'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pvxghAn0BcJ8",
        "outputId": "ceef5bfe-884b-4bae-84b6-e2367c986a52"
      },
      "execution_count": 152,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "PROCEDIMIENTOS\n",
              "CESAREA            3180\n",
              "PARTO EUTOCICO     2327\n",
              "PARTO FORTUITO       69\n",
              "FORTUITO             60\n",
              "PARTO EUTOPICO       31\n",
              "PARTO EUTOSICO       21\n",
              "PARTO EUTICICO       16\n",
              " CESAREA              9\n",
              "PARTO EUTOCICO        7\n",
              "VAGINAL               5\n",
              "PARTO EUTOICO         5\n",
              "PARTO ETOCICO         3\n",
              "CESAREA               2\n",
              "F                     1\n",
              "OVITO FETAL           1\n",
              "ceSAREA               1\n",
              "PARETO EUTOCICO       1\n",
              "PERTO EUTOCICO        1\n",
              "PARTO                 1\n",
              "PARTO VAGINAL         1\n",
              "RN FORTUITO           1\n",
              " PARTO EUTOCICO       1\n",
              "PARTO EUTOPICO        1\n",
              "cesarea               1\n",
              "Name: count, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 152
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Como los valores no estan bien escritos, procedemos a cambiarlos."
      ],
      "metadata": {
        "id": "-iOyl92RHODZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df['PROCEDIMIENTOS'] = df['PROCEDIMIENTOS'].replace(['CESAREA ', ' CESAREA', 'ceSAREA', 'cesarea'], 'CESAREA')\n",
        "\n",
        "df['PROCEDIMIENTOS'] = df['PROCEDIMIENTOS'].apply(lambda x: 'PARTO VAGINAL' if x != 'CESAREA' else x)"
      ],
      "metadata": {
        "id": "afOZArwzBw2b"
      },
      "execution_count": 153,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['PROCEDIMIENTOS'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2k7h86piFxTH",
        "outputId": "52c5c0f2-66b2-4ce5-d522-3e489c4de9a7"
      },
      "execution_count": 154,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "PROCEDIMIENTOS\n",
              "CESAREA          3193\n",
              "PARTO VAGINAL    2553\n",
              "Name: count, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 154
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['GEMELAR'].unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "G2dGLi-PHa16",
        "outputId": "493391ba-6d37-4052-ebee-f6d413379d91"
      },
      "execution_count": 155,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['NO', 'SI', 'si'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 155
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['GEMELAR'] = df['GEMELAR'].replace('si', 'SI')"
      ],
      "metadata": {
        "id": "hfDk-_FGJLfE"
      },
      "execution_count": 156,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['VIVI/MUERTO'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1xVGY-Q_J7B9",
        "outputId": "597e6ebe-76cc-4932-8b22-b4a206abde88"
      },
      "execution_count": 157,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "VIVI/MUERTO\n",
              "VIVO      5683\n",
              "MUERTO      62\n",
              "NO           1\n",
              "Name: count, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 157
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['VIVI/MUERTO'] = df['VIVI/MUERTO'].replace('NO', 'MUERTO')"
      ],
      "metadata": {
        "id": "aI5A1lshKFB2"
      },
      "execution_count": 158,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['SEXO'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YyyCRVb2KPKF",
        "outputId": "b7ba7531-c5fe-48b0-9a74-66b6a5aa7e31"
      },
      "execution_count": 159,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "SEXO\n",
              "M      2927\n",
              "F      2785\n",
              "m        24\n",
              "f         8\n",
              "F]M       1\n",
              "MF        1\n",
              "Name: count, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 159
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['SEXO'] = df['SEXO'].replace('m', 'M')\n",
        "df['SEXO'] = df['SEXO'].replace('f', 'F')\n",
        "\n",
        "df = df[df['SEXO'].isin(['M', 'F'])]"
      ],
      "metadata": {
        "id": "KlG1VSEBKZyu"
      },
      "execution_count": 160,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['SEXO'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cZZJYpCPLCDG",
        "outputId": "4918232f-4f75-473b-87d8-d425d355e1b3"
      },
      "execution_count": 161,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "SEXO\n",
              "M    2951\n",
              "F    2793\n",
              "Name: count, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 161
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['PESO'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "D-61QSLjLHua",
        "outputId": "44dade07-9e40-4cd1-a461-b56dd5ae66af"
      },
      "execution_count": 162,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "PESO\n",
              "3.00    679\n",
              "3.20    520\n",
              "3.50    504\n",
              "3.40    457\n",
              "3.10    403\n",
              "       ... \n",
              "3.22      1\n",
              "2.27      1\n",
              "4.80      1\n",
              "3.77      1\n",
              "7.60      1\n",
              "Name: count, Length: 85, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 162
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['PESO'] = df['PESO'].replace('3.53.5', '3.53')\n"
      ],
      "metadata": {
        "id": "XKP2MRbvQElP"
      },
      "execution_count": 163,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['PESO'] = df['PESO'].astype(float).round(2)"
      ],
      "metadata": {
        "id": "vIorqoDrP173"
      },
      "execution_count": 164,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "fig = go.Figure(data=[go.Box(y=df['PESO'], name='PESO')])\n",
        "fig.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "id": "qp6_faWEPqvR",
        "outputId": "bb8d4aca-fedf-4d68-cb1b-e5eae6c278bf"
      },
      "execution_count": 165,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.24.1.min.js\"></script>                <div id=\"cc0726e9-1e91-46bd-b5b7-c281da069eba\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"cc0726e9-1e91-46bd-b5b7-c281da069eba\")) {                    Plotly.newPlot(                        \"cc0726e9-1e91-46bd-b5b7-c281da069eba\",                        [{\"name\":\"PESO\",\"y\":[3.1,2.8,2.4,3.9,3.0,3.2,3.1,3.1,3.1,3.3,2.1,3.0,3.5,3.5,3.2,3.4,2.1,3.5,3.0,2.8,2.8,3.0,3.6,3.4,3.4,3.8,3.4,3.3,3.4,2.6,2.5,3.5,4.0,2.4,3.4,2.7,2.2,3.5,3.5,1.8,3.4,3.1,2.7,2.8,3.5,2.7,2.8,3.3,2.2,3.4,3.2,3.9,3.1,3.5,3.3,2.5,2.5,3.2,3.4,3.6,3.7,3.5,2.2,1.8,1.2,3.1,3.9,3.7,2.2,3.2,3.5,2.9,3.4,3.0,2.0,3.0,3.4,3.3,1.3,3.3,3.5,3.4,3.1,3.6,3.6,2.3,2.8,3.1,2.9,3.9,3.93,4.0,3.4,3.3,3.4,2.2,2.8,1.9,3.2,3.0,3.0,3.0,2.9,3.8,3.4,3.6,2.6,3.2,3.0,2.0,5.2,3.4,3.4,3.1,3.5,3.3,3.3,3.4,3.2,3.3,3.9,3.1,3.5,2.8,3.0,2.3,2.9,3.1,3.1,3.1,3.1,3.0,3.0,3.2,3.8,3.2,3.1,2.9,2.7,4.0,3.0,3.4,2.5,3.4,3.5,3.0,3.0,2.8,3.5,3.0,0.9,3.1,2.0,2.8,3.6,3.4,3.0,2.5,3.6,2.4,3.6,3.0,3.4,3.7,2.8,2.3,3.3,3.3,3.4,3.1,2.6,3.7,3.3,3.0,3.6,3.8,2.8,3.5,3.5,2.2,3.5,3.2,3.2,3.5,3.1,3.1,3.6,2.7,3.2,2.5,3.2,3.0,3.7,2.9,3.7,3.4,3.0,3.0,3.9,3.5,2.2,1.8,2.2,2.2,3.0,3.0,3.2,3.1,3.5,3.2,2.8,2.8,2.3,2.6,3.3,4.5,2.7,2.5,3.9,3.0,3.6,3.2,3.2,2.9,3.3,3.0,3.4,2.5,2.9,3.6,3.3,3.1,2.8,2.3,2.7,2.7,3.0,3.0,3.1,3.9,2.5,2.1,3.4,2.9,2.5,3.6,3.3,2.9,3.4,3.1,2.9,3.4,1.8,3.0,3.4,4.2,3.6,3.4,2.7,2.8,3.1,3.1,3.1,2.7,2.9,3.0,3.1,2.5,2.7,3.0,2.5,3.5,3.2,2.5,1.7,2.8,2.6,2.9,3.5,3.0,2.8,3.2,3.5,3.6,3.2,3.6,2.9,4.0,3.0,3.8,3.1,3.1,3.5,2.0,2.8,3.0,3.7,2.7,3.8,3.5,3.8,3.5,3.4,2.7,3.1,1.3,3.0,3.0,3.4,3.0,3.7,2.8,3.2,3.6,2.9,4.0,3.0,2.9,3.8,3.2,3.1,1.2,2.9,3.3,3.8,4.0,3.0,3.9,3.1,2.7,3.1,3.0,3.5,2.9,2.9,3.0,3.2,3.3,3.0,3.2,3.4,2.2,2.2,3.0,3.5,3.6,3.0,2.9,3.5,2.7,3.6,3.6,3.2,3.1,2.6,3.6,3.6,3.3,3.4,2.8,4.0,3.6,3.0,3.1,3.2,2.7,2.8,3.8,8.6,3.8,3.0,3.9,2.9,3.4,2.7,1.8,2.9,3.0,2.2,3.5,3.2,2.6,3.1,3.3,3.8,3.0,2.3,3.4,2.8,2.6,3.6,3.0,3.0,2.9,3.1,2.9,2.8,4.1,2.7,2.0,3.1,3.0,3.5,3.1,2.8,3.4,3.4,3.7,3.3,2.9,3.5,3.1,3.3,3.0,3.1,3.1,3.0,3.0,3.2,3.2,3.9,3.5,3.5,3.4,3.6,2.6,3.0,3.3,3.2,4.0,3.1,3.5,2.8,3.5,2.9,3.5,3.5,1.3,3.5,4.2,3.0,2.6,4.0,2.6,2.6,3.9,2.9,3.5,2.6,3.8,3.0,2.9,3.3,3.2,3.4,3.9,3.3,4.9,3.8,3.2,2.7,3.2,2.2,3.2,3.5,2.6,3.9,4.0,3.1,4.1,3.5,2.6,3.4,3.3,2.9,3.3,3.2,3.6,3.6,3.1,3.0,3.9,2.7,3.3,3.0,2.5,3.3,3.0,2.6,1.3,3.6,2.5,2.6,3.0,2.9,3.2,3.2,2.5,2.6,3.0,3.2,2.2,3.5,2.2,3.5,3.1,2.7,3.1,2.7,3.1,3.3,2.7,2.7,2.7,2.4,2.3,2.7,2.6,3.0,3.7,3.0,3.3,2.8,3.5,2.9,3.0,2.6,2.2,2.6,3.5,3.4,2.4,2.7,2.5,3.5,3.3,3.2,2.7,3.2,3.8,3.0,3.2,3.3,3.6,2.6,2.8,2.9,2.0,2.9,3.2,3.4,3.1,3.1,3.1,2.8,3.1,3.5,2.8,3.1,3.0,3.0,2.5,3.3,3.4,3.3,2.5,3.2,3.3,2.8,3.0,2.9,3.5,3.5,3.6,3.6,3.3,3.7,3.0,3.3,2.9,3.5,3.1,3.1,3.6,2.8,4.1,3.1,3.7,3.0,2.6,3.0,3.6,3.2,2.9,3.0,4.2,2.5,2.7,3.2,3.6,3.2,3.3,3.3,2.0,3.7,2.7,3.0,3.7,2.0,2.5,2.6,3.0,2.9,4.1,2.5,3.8,3.2,3.1,3.5,3.1,2.9,2.7,3.1,3.3,3.5,2.9,3.1,3.2,3.7,3.2,1.9,2.7,2.2,1.3,3.0,3.5,3.0,3.5,1.8,3.8,3.4,3.8,3.4,3.6,2.7,3.3,3.4,2.7,2.6,3.3,3.7,3.0,2.9,3.3,3.5,3.2,2.8,3.6,0.6,3.2,2.3,3.3,3.4,3.4,3.8,2.3,3.3,3.5,3.0,3.4,3.3,3.2,2.6,3.0,3.0,3.0,3.0,3.0,3.1,2.5,3.4,4.0,2.3,3.1,2.7,2.2,3.4,3.3,3.4,3.4,3.3,3.1,2.9,1.8,3.5,2.3,3.0,3.4,2.8,2.9,3.1,3.0,3.0,2.5,3.0,3.0,3.0,3.0,3.0,3.3,3.2,2.7,3.0,3.4,3.2,2.7,3.0,3.4,3.5,2.5,3.0,2.8,2.8,3.2,2.9,3.2,2.8,3.5,3.8,2.7,3.6,3.4,2.4,2.3,3.7,2.8,3.7,3.3,3.5,3.5,3.1,3.6,3.3,3.5,3.4,3.4,3.6,3.4,2.7,2.7,3.8,3.5,3.1,2.0,3.5,3.3,3.0,3.5,3.2,3.4,3.4,4.0,2.27,3.2,3.0,4.0,3.2,3.2,3.0,2.8,3.0,3.0,2.8,3.2,3.0,3.5,3.1,3.0,3.3,3.1,3.1,2.5,2.7,3.6,4.0,2.7,3.0,2.0,3.5,3.1,2.9,2.8,3.2,3.2,3.0,0.6,4.1,3.5,3.0,3.7,3.0,3.5,4.9,3.2,3.0,4.0,3.8,3.4,3.5,3.4,3.7,3.0,3.2,3.4,2.9,3.4,3.9,4.0,2.5,3.0,2.9,3.0,2.2,3.2,3.1,3.6,3.4,2.9,3.1,3.1,3.0,2.5,3.5,4.0,3.4,3.9,3.5,3.5,4.0,2.6,3.3,3.4,3.4,3.4,3.0,3.5,3.2,3.0,3.0,4.0,3.7,3.3,3.6,3.2,3.0,0.6,2.7,3.6,2.7,2.7,3.6,3.1,3.1,3.6,3.6,3.0,2.9,3.3,3.8,3.8,2.9,2.8,4.5,2.9,3.4,3.5,3.6,2.9,4.0,3.0,3.0,2.3,3.5,2.1,3.0,2.9,3.6,3.3,3.2,3.2,3.6,4.0,2.7,3.6,3.6,3.6,3.6,3.3,3.5,3.1,3.1,3.3,3.5,3.5,3.7,3.3,3.0,3.0,2.3,3.4,2.8,2.7,3.3,2.8,3.1,3.2,3.0,3.0,3.0,3.6,3.5,3.0,2.6,3.2,3.2,2.7,3.1,3.1,3.6,3.5,2.7,3.2,3.2,3.3,4.0,3.1,2.8,3.3,3.3,3.0,3.4,3.0,4.0,2.9,3.3,3.2,3.6,3.4,3.6,3.1,3.4,3.2,3.0,3.9,3.3,3.2,1.9,4.0,3.5,3.5,3.3,4.3,3.3,3.4,3.6,3.0,4.3,3.0,3.1,2.7,3.1,3.2,4.0,3.2,3.5,3.0,3.8,3.2,2.5,3.0,3.6,3.0,4.5,204.0,3.5,3.2,2.4,3.2,2.5,2.5,2.8,3.5,3.0,3.0,2.8,2.6,3.7,3.0,3.3,3.2,3.5,3.5,3.5,3.1,3.6,3.1,3.1,3.2,3.1,3.4,3.1,2.5,2.6,3.0,3.1,2.9,2.8,3.3,3.5,3.3,3.5,3.4,3.5,3.1,3.2,3.0,2.7,3.7,1.3,3.5,3.6,3.5,3.7,2.8,3.5,3.6,3.5,3.0,3.3,3.4,2.9,3.4,2.5,2.0,2.9,3.4,2.3,4.2,4.3,2.0,2.5,3.1,2.8,3.7,1.9,3.3,2.9,3.9,3.0,4.0,3.3,3.2,3.8,1.8,3.2,4.2,3.5,3.2,3.9,2.8,3.2,3.5,3.3,3.4,3.4,3.5,3.0,3.4,4.6,3.0,3.0,3.0,3.5,3.0,3.6,3.2,3.0,3.1,2.9,2.9,3.4,3.6,2.9,3.2,2.1,3.4,2.9,3.6,2.3,3.8,2.9,4.0,3.7,3.6,3.6,2.7,3.9,3.2,2.7,3.2,3.1,2.5,3.2,3.5,2.5,3.2,3.2,3.2,4.0,3.5,2.9,2.5,2.8,3.6,3.5,3.6,3.3,2.9,3.0,3.2,1.4,3.8,3.5,3.5,2.4,3.5,2.3,3.0,3.8,3.3,3.5,3.2,3.0,3.5,3.1,2.2,3.3,2.5,3.4,2.4,3.0,3.8,3.6,3.6,2.7,3.1,2.5,2.7,2.7,3.4,1.4,2.8,1.4,2.8,3.7,3.3,1.8,3.7,3.5,5.0,3.0,3.2,3.2,3.0,3.2,3.0,3.5,3.9,3.4,4.0,1.6,3.9,2.9,3.4,3.1,3.5,2.2,3.1,3.5,3.4,3.1,3.6,3.6,3.3,3.6,3.6,3.4,3.0,3.0,3.3,3.6,3.2,2.7,3.4,3.1,2.7,4.7,2.8,3.0,4.0,3.4,2.7,3.4,2.0,2.7,3.5,1.5,3.4,2.7,3.0,2.0,2.2,3.4,3.4,2.9,2.5,3.6,2.5,2.7,2.8,2.4,3.2,2.7,3.4,3.0,3.1,2.8,3.2,3.2,3.4,1.8,3.1,3.6,3.0,2.5,3.4,2.9,3.0,2.3,2.4,3.5,2.5,2.5,3.0,3.0,3.0,2.2,3.6,3.6,3.1,3.6,3.4,3.4,2.5,2.7,3.3,3.5,2.1,3.2,3.5,3.4,2.0,2.9,2.8,3.4,3.8,4.2,3.3,3.4,2.7,2.9,3.7,2.2,3.2,3.4,2.9,3.2,3.3,2.8,4.4,2.9,3.2,3.5,2.5,2.3,3.5,2.7,3.5,2.0,3.0,3.2,3.9,3.1,2.4,3.6,2.2,2.8,3.4,2.7,3.3,3.5,2.6,3.6,1.8,3.3,1.6,3.3,3.4,2.2,3.6,3.9,2.8,3.0,2.7,3.4,3.6,3.0,3.0,3.3,2.3,2.6,3.2,3.2,3.2,1.5,3.6,4.0,2.6,2.6,2.0,1.9,2.7,3.1,3.0,3.1,3.1,4.0,2.5,3.4,1.7,2.4,3.0,3.2,3.0,2.5,1.9,3.1,3.5,3.0,3.1,3.4,3.9,3.3,3.3,3.8,2.9,2.3,3.0,2.4,3.0,3.2,3.2,3.0,3.3,1.7,3.5,3.2,2.8,3.9,3.4,3.5,3.7,3.8,2.7,3.5,2.6,2.7,3.4,2.5,1.6,3.0,5.6,1.9,3.0,3.0,2.5,5.2,3.4,3.5,2.0,3.3,1.5,4.0,3.0,3.9,2.9,3.5,3.1,3.2,3.4,3.2,1.8,2.9,3.6,2.6,3.7,1.9,2.6,3.4,3.0,3.8,2.7,3.3,2.7,3.4,2.6,2.6,2.6,3.1,3.3,3.4,2.7,3.0,3.9,2.5,2.5,3.0,3.5,2.9,3.2,2.7,3.2,3.8,3.9,3.2,2.7,2.2,3.1,3.6,2.5,2.7,2.6,3.9,2.9,3.5,2.5,3.4,3.0,3.4,3.0,2.6,3.4,3.0,3.6,2.7,2.7,2.8,3.0,3.0,3.3,3.4,3.5,3.2,2.8,3.6,4.5,3.2,3.5,2.0,3.2,3.7,3.5,3.0,3.9,3.7,3.0,2.7,3.0,2.7,3.4,3.5,2.5,2.5,3.2,3.8,2.7,3.8,2.7,3.4,3.4,3.0,3.5,3.0,3.2,0.9,1.0,2.3,3.5,3.1,3.0,3.6,0.4,3.3,3.0,3.0,3.4,3.9,2.7,1.8,3.0,3.3,3.2,3.0,3.3,3.4,3.0,2.4,3.5,3.0,3.2,2.8,3.0,3.3,3.5,3.0,0.9,3.0,3.0,3.1,2.6,3.6,3.2,3.1,3.0,3.4,3.6,4.0,3.0,3.0,3.0,3.1,2.9,3.8,1.6,3.7,3.4,3.3,3.5,3.3,2.9,2.7,2.0,3.7,2.5,0.6,3.0,3.2,2.5,4.0,3.0,3.2,2.1,2.8,3.7,3.5,2.6,3.4,3.0,4.0,3.5,3.5,3.2,3.2,2.2,3.4,3.9,3.7,1.3,3.0,3.5,3.6,3.2,3.3,2.9,2.4,1.5,3.0,2.9,3.1,3.9,3.8,2.8,3.0,3.4,2.7,3.5,3.1,2.7,2.9,3.1,2.7,3.5,3.6,2.6,1.3,4.0,3.0,2.7,3.2,3.1,2.7,3.4,3.6,2.6,1.3,4.0,3.0,2.7,3.2,3.0,3.0,1.8,3.4,3.1,4.1,3.4,2.6,2.8,3.2,3.3,2.5,0.9,2.8,4.6,3.2,3.3,2.9,2.8,3.8,3.5,3.4,2.8,3.9,3.7,3.3,2.3,2.4,3.0,2.7,3.9,3.0,3.58,3.7,3.1,3.0,2.8,2.7,3.5,3.0,3.5,2.8,2.7,3.4,3.4,3.5,3.2,2.5,3.8,3.5,3.2,2.3,2.7,2.7,3.0,3.1,2.7,3.3,3.0,3.3,2.0,3.4,3.4,3.2,2.8,3.4,3.1,1.5,3.7,1.3,3.5,0.9,3.6,2.8,3.4,2.7,3.5,3.3,2.5,2.5,3.5,3.3,3.1,3.4,2.7,3.8,2.5,2.8,3.1,3.0,3.4,3.4,3.3,3.8,3.9,3.4,3.0,2.6,3.0,4.0,3.1,2.8,2.4,3.0,3.3,3.7,2.2,3.1,3.5,3.6,3.2,3.3,3.0,2.8,3.5,4.1,3.4,3.0,2.6,3.0,4.0,3.1,2.8,2.4,3.0,3.3,3.7,2.2,3.1,3.5,3.6,3.2,3.3,3.0,2.8,3.5,4.1,3.3,3.0,2.9,3.3,2.7,2.6,2.9,4.2,2.8,3.1,3.0,3.4,3.2,2.5,3.6,2.5,3.7,3.4,3.3,3.3,3.5,2.1,3.5,4.2,3.3,2.3,3.3,3.0,2.8,4.3,3.5,3.2,3.8,3.6,1.3,2.2,2.9,3.1,2.7,3.3,2.8,3.0,2.4,3.4,2.4,3.6,2.8,4.1,3.0,2.8,3.8,1.5,3.0,3.0,3.6,2.7,2.8,2.8,3.2,2.8,3.8,1.8,1.9,2.1,3.0,3.5,3.0,3.5,4.0,3.5,3.5,4.1,4.4,2.9,3.3,1.8,3.0,3.1,3.2,3.6,3.0,3.5,3.5,2.5,3.0,2.9,3.3,3.0,3.2,2.9,36.0,3.0,2.7,2.4,3.0,2.8,1.8,2.5,3.2,3.1,3.0,3.3,3.4,2.2,3.5,2.1,2.3,2.0,3.5,2.6,3.5,2.5,3.2,1.9,2.9,3.0,3.2,2.6,3.4,2.8,2.6,2.8,2.8,2.7,3.1,3.7,3.3,3.4,3.5,4.0,3.2,3.4,3.1,3.0,3.5,3.0,3.4,2.0,3.3,3.6,3.9,3.6,3.8,3.6,2.7,4.0,3.4,2.6,3.0,3.2,3.6,2.7,3.11,2.6,2.1,3.1,3.2,2.7,2.6,0.9,2.7,3.6,3.1,3.5,4.1,3.3,3.0,3.0,3.8,3.0,3.0,0.4,4.9,2.5,3.3,3.6,3.5,2.8,2.6,2.7,3.4,3.0,3.7,2.7,3.4,2.8,2.8,1.2,2.8,3.5,3.0,3.2,4.0,2.2,3.0,2.6,2.5,3.1,4.0,3.1,3.2,3.5,2.5,208.0,3.3,2.7,3.1,3.0,3.0,2.8,3.0,3.3,3.5,2.7,3.4,3.2,2.3,3.4,3.5,3.3,3.2,2.4,2.5,2.7,3.6,2.5,3.0,2.9,2.4,3.2,3.2,3.0,3.6,3.4,3.7,2.7,3.2,3.6,3.0,2.6,3.3,2.3,2.6,2.9,31.0,3.6,3.5,3.0,2.7,2.8,3.3,3.2,3.2,3.4,3.4,2.9,2.6,2.3,2.6,3.0,3.2,3.0,3.0,2.8,3.2,3.8,1.8,2.6,3.2,3.2,3.4,3.3,2.8,3.0,3.7,3.2,1.9,2.4,3.5,3.5,2.5,3.2,2.7,3.8,3.2,3.2,3.6,3.6,3.5,2.5,2.7,2.6,2.7,3.6,2.0,2.9,3.0,3.0,3.0,3.2,3.2,2.6,3.2,3.2,3.6,3.6,3.0,2.5,3.1,3.2,3.0,3.1,3.7,2.7,2.6,2.7,3.3,3.3,3.2,4.2,2.7,3.2,3.0,2.7,3.0,2.7,3.4,2.5,2.7,2.7,2.3,3.5,3.7,3.5,3.2,2.7,3.4,2.6,3.1,2.7,2.7,3.4,2.6,3.4,3.6,2.9,3.2,2.4,3.2,3.2,2.8,3.3,3.3,3.2,1.5,3.2,3.5,2.7,3.3,3.4,3.3,3.1,3.6,1.8,3.1,2.9,3.5,3.4,2.0,3.5,3.5,2.0,3.0,1.8,2.5,2.5,3.0,6.0,3.2,3.3,4.1,3.4,3.3,3.0,2.7,2.3,3.1,3.4,3.0,1.6,2.8,3.1,3.3,2.1,2.7,3.3,3.2,3.5,2.6,2.5,2.7,3.2,2.7,2.5,3.2,3.5,2.9,0.9,2.0,3.4,3.2,3.5,3.5,2.9,2.6,2.6,2.9,3.5,3.4,3.5,2.8,2.5,3.5,2.2,3.7,4.7,3.2,3.8,3.5,3.3,3.0,2.8,3.6,3.1,1.9,3.0,3.3,2.9,25.4,3.5,3.5,3.2,3.6,3.1,2.8,2.8,3.7,2.6,3.7,3.6,2.2,2.6,3.0,3.0,3.5,2.2,2.6,3.0,3.0,3.0,3.5,2.7,2.6,3.1,3.0,2.9,3.5,2.8,3.4,3.7,3.0,2.8,2.9,3.4,3.0,3.0,3.0,1.0,3.0,2.0,6.0,1.0,4.0,1.0,1.0,1.0,4.0,2.0,1.0,2.0,1.0,3.0,5.0,3.0,1.0,3.0,7.0,1.0,1.0,4.0,1.0,1.0,2.0,1.0,5.0,2.0,1.0,1.0,3.0,1.0,8.0,4.0,1.0,1.0,3.0,4.0,1.0,1.0,1.0,3.2,3.7,2.36,2.8,2.1,3.0,2.6,3.3,3.8,3.7,3.2,3.1,2.36,3.3,2.6,4.2,2.5,3.5,4.1,3.2,3.1,4.4,3.0,3.1,3.0,2.5,2.1,3.4,2.5,2.1,3.0,3.4,3.4,3.0,3.2,3.3,2.6,3.5,2.3,2.3,2.6,3.5,3.0,3.0,3.58,3.8,3.6,3.5,3.9,2.9,3.5,3.4,2.7,3.5,2.8,2.1,3.1,3.8,2.9,3.2,3.55,3.2,3.4,3.3,3.7,2.8,4.1,3.0,3.3,2.5,4.0,3.5,3.2,3.2,2.8,3.0,3.7,3.3,3.6,3.0,3.7,2.9,3.2,2.5,2.1,2.8,2.9,3.2,3.1,3.6,3.0,2.2,3.1,3.1,3.2,3.1,3.9,2.7,2.7,3.3,3.7,3.2,3.8,3.0,3.6,3.0,2.6,3.2,3.4,2.6,2.5,1.8,3.9,2.4,2.8,3.2,4.2,3.0,2.2,2.7,0.8,3.3,3.2,2.9,3.4,3.2,4.0,3.6,3.1,3.3,2.9,3.0,1.9,3.0,2.6,3.5,3.9,3.0,3.9,3.0,2.9,4.0,2.9,3.8,3.1,3.1,3.4,3.6,3.2,2.9,3.4,4.0,3.8,2.8,4.1,3.5,3.5,3.0,3.0,3.4,2.7,2.9,2.7,2.6,3.4,2.9,3.4,2.3,2.5,2.7,3.8,3.1,2.9,3.8,2.6,3.0,3.0,2.5,2.5,4.0,3.0,3.0,3.0,3.2,3.1,3.0,2.5,3.6,3.6,2.6,3.6,3.3,3.4,3.4,2.9,3.0,2.5,2.8,3.0,3.4,3.1,3.2,2.9,3.0,2.7,2.6,2.7,3.0,2.8,3.8,3.4,3.1,2.2,3.2,2.8,2.9,2.6,3.2,3.5,3.0,3.6,3.0,2.9,3.4,3.8,2.9,3.4,2.7,2.6,4.0,3.1,3.1,3.6,3.9,3.0,3.2,3.4,3.4,3.0,2.8,2.4,2.8,2.2,2.9,2.3,4.0,3.4,3.4,3.4,2.9,2.8,3.3,3.3,2.8,3.8,1.5,2.7,3.0,3.5,3.4,3.1,2.7,3.4,2.8,2.8,3.0,3.2,3.6,2.7,3.4,3.5,3.6,3.2,2.1,0.8,2.9,3.9,3.4,2.6,3.3,2.7,3.6,3.5,3.1,2.8,3.2,3.0,3.0,3.4,14.8,3.5,3.2,3.0,3.4,3.4,4.3,3.2,3.2,3.3,3.3,3.3,2.7,3.5,2.5,3.6,3.2,4.1,3.2,3.0,2.2,3.1,3.8,3.4,1.6,3.3,2.9,3.1,3.5,3.1,3.7,3.2,3.7,2.6,1.7,1.5,3.3,2.5,3.1,3.6,3.6,3.8,3.8,3.1,3.7,3.2,2.8,3.4,3.1,2.9,2.4,2.9,2.8,2.3,3.2,3.7,3.1,3.1,3.6,1.8,2.5,3.2,3.1,3.6,3.5,2.5,3.0,4.2,4.2,3.2,3.1,3.0,2.2,3.22,3.3,3.8,3.6,3.5,1.5,3.3,3.3,3.4,2.8,3.3,4.2,0.9,2.5,3.5,2.7,2.5,3.0,3.9,3.2,3.9,2.7,3.5,2.9,3.0,2.7,3.0,3.5,2.9,3.4,3.4,3.0,3.4,3.4,2.5,2.8,2.3,3.5,3.5,3.4,3.9,3.2,3.7,3.4,2.9,2.7,3.5,2.6,2.5,2.6,3.1,3.0,4.0,3.3,2.8,3.8,3.2,4.3,3.5,2.5,3.8,3.2,3.2,3.0,3.0,2.9,2.9,3.0,3.6,3.6,2.8,3.1,3.1,3.0,3.9,3.5,3.6,3.5,2.6,2.7,3.0,3.1,4.0,2.9,3.0,3.4,3.3,3.8,3.9,3.2,2.3,2.5,3.5,4.0,2.4,1.5,4.0,2.7,3.8,3.8,3.4,3.3,3.8,3.5,3.4,2.8,2.7,2.2,4.0,2.8,2.1,1.6,3.2,2.5,2.5,3.8,1.8,3.1,3.4,3.7,2.9,2.7,4.0,3.4,2.9,3.4,2.9,3.2,3.8,3.6,3.1,2.5,2.8,3.6,3.5,2.0,3.5,3.5,1.9,2.5,2.7,3.5,3.1,4.0,3.4,3.4,3.3,2.5,3.1,3.2,3.1,2.5,2.8,3.7,3.6,4.5,3.0,4.0,2.7,3.0,2.8,3.2,3.8,3.5,3.2,3.1,3.2,3.2,1.0,3.3,3.3,3.2,3.0,3.0,3.8,1.2,2.7,3.7,3.5,2.4,2.9,2.9,2.9,2.8,3.2,3.0,2.6,3.7,3.0,4.0,2.5,3.2,3.6,0.9,3.3,2.6,5.5,3.3,2.7,3.3,3.2,3.4,3.5,3.5,3.2,3.3,3.8,3.0,3.0,2.6,3.2,2.9,3.5,3.1,3.0,2.9,3.2,4.3,3.0,3.7,3.5,2.8,3.1,3.0,4.0,2.8,2.6,3.1,3.0,2.9,3.9,3.2,3.5,2.9,3.3,3.8,3.3,3.6,3.6,2.7,3.0,3.8,3.7,4.0,3.3,2.5,2.7,3.0,3.0,2.9,2.9,2.4,2.7,3.3,3.9,2.7,3.5,2.5,3.6,2.6,3.3,3.5,2.6,3.0,3.2,3.3,3.2,3.0,2.7,3.5,2.8,3.4,3.0,2.9,2.9,2.8,3.6,3.4,2.8,3.2,3.3,3.3,2.2,3.5,3.7,3.3,3.1,3.7,2.9,3.2,3.6,3.3,2.7,3.2,3.9,2.7,3.3,3.7,2.1,2.5,2.7,2.7,3.4,3.2,3.4,3.7,2.5,2.9,3.5,3.0,2.5,3.4,3.2,3.6,3.0,3.6,3.1,2.8,1.3,3.0,3.6,3.0,2.5,3.2,3.0,3.2,3.1,2.2,3.5,3.3,2.5,3.0,3.4,3.9,3.1,2.1,3.2,2.8,2.8,3.4,3.6,3.5,3.6,4.4,2.6,2.6,2.9,2.7,3.5,3.4,3.2,2.7,3.1,3.0,3.1,3.2,3.1,3.6,3.5,3.2,3.3,3.7,3.2,3.3,3.3,2.9,3.7,4.0,2.4,3.6,3.7,3.4,3.5,3.5,3.1,3.6,2.7,2.7,3.0,2.6,3.3,2.3,4.3,3.1,3.1,3.0,3.7,2.9,3.3,3.5,3.5,3.6,3.0,3.1,3.1,2.2,3.4,3.1,3.7,3.4,3.2,3.6,3.5,2.5,3.0,3.6,2.9,2.5,2.3,3.5,3.2,3.4,3.0,3.2,3.0,3.8,3.7,3.7,3.4,3.4,2.66,3.0,2.8,3.8,3.7,3.3,2.2,3.2,3.2,3.0,3.4,0.6,3.6,3.2,3.4,3.8,3.5,3.8,3.4,3.7,2.2,3.6,3.5,3.5,3.5,2.8,3.8,3.5,4.4,3.3,3.7,4.2,3.5,2.5,3.4,3.6,3.4,3.3,3.6,3.1,3.8,3.4,3.4,3.8,3.7,3.2,4.0,3.5,3.3,2.6,1.5,3.5,4.1,2.9,3.5,2.9,4.5,4.2,3.3,3.0,3.5,3.3,3.8,3.0,2.4,2.9,2.3,2.4,3.0,2.8,3.7,2.7,3.6,3.7,3.2,3.9,2.4,1.5,2.9,2.5,3.5,3.2,3.6,3.2,2.4,3.4,2.6,3.0,3.3,3.7,2.5,3.9,3.2,4.0,3.3,3.9,3.0,2.9,3.3,3.1,3.5,3.2,3.2,3.7,2.3,3.4,3.7,4.5,3.5,2.5,3.0,3.0,2.8,3.4,3.3,3.3,3.0,3.0,3.1,3.2,3.2,2.8,2.7,4.5,3.0,2.7,2.3,3.2,3.2,3.6,3.8,3.1,2.3,3.5,2.7,3.3,3.2,2.2,4.5,3.4,3.6,2.5,2.9,3.5,4.7,2.5,4.8,3.1,2.6,2.9,3.2,3.3,2.5,1.8,2.7,3.6,2.7,3.4,3.2,3.1,2.9,3.3,3.4,2.6,3.5,3.0,3.0,2.7,2.9,4.6,3.2,3.7,4.6,1.5,3.4,3.5,3.2,3.0,3.5,2.8,3.2,3.1,1.8,1.8,3.5,2.4,3.4,3.1,3.6,3.7,3.3,2.9,3.3,3.4,3.7,2.9,3.0,3.3,3.1,4.1,3.3,3.0,3.6,3.2,4.1,2.9,3.2,3.1,3.4,2.9,1.3,3.9,2.9,3.0,3.5,2.8,3.4,2.6,3.0,4.0,3.0,3.6,3.4,3.4,3.4,4.4,3.0,3.2,2.8,3.6,3.2,2.9,3.3,3.5,3.4,2.7,3.5,2.8,3.6,3.0,3.5,3.5,3.5,3.2,4.2,2.1,3.0,2.4,4.1,2.7,2.2,3.4,3.3,4.1,3.3,4.0,2.0,2.5,2.5,3.0,3.5,3.6,2.9,3.2,3.0,3.6,3.1,3.2,3.3,3.4,2.9,3.3,3.9,2.9,3.6,3.2,3.77,3.4,2.7,3.2,3.5,2.4,3.5,3.7,2.6,4.2,3.2,2.1,2.9,3.6,5.6,2.6,3.2,2.1,3.3,3.5,3.2,3.2,3.8,3.7,3.0,2.7,2.7,3.4,4.2,2.8,3.0,2.9,2.9,3.4,2.5,2.7,3.7,4.0,3.4,3.5,3.5,3.3,2.4,3.2,2.1,3.4,3.9,3.3,3.7,3.5,2.6,3.0,2.6,3.5,3.0,2.2,3.2,2.2,3.6,3.5,3.2,3.3,2.8,3.5,3.7,3.9,2.8,3.4,3.4,3.3,2.4,2.4,2.9,3.1,2.6,3.1,3.0,2.7,3.1,3.1,4.3,4.3,3.5,3.3,3.4,3.2,4.1,3.2,3.5,3.1,3.1,3.4,2.9,3.5,2.5,5.0,3.2,3.4,3.2,3.0,2.6,3.1,2.8,3.2,3.2,3.3,3.4,1.4,1.2,2.0,3.1,3.6,2.5,2.6,1.6,3.2,2.2,3.6,3.1,2.6,3.4,2.7,3.2,2.9,2.6,3.1,3.5,3.7,3.0,2.0,2.6,2.9,3.9,3.5,3.0,3.3,3.5,2.5,3.2,3.0,2.7,4.0,2.9,3.1,4.0,2.7,3.2,3.5,3.4,2.8,2.6,2.7,3.0,3.6,3.6,4.2,3.4,3.4,3.1,2.9,2.7,2.7,3.2,2.9,2.9,2.9,2.8,3.6,4.5,3.2,3.4,3.4,3.3,3.3,3.2,3.0,3.2,3.4,3.0,3.2,2.9,2.8,2.8,3.1,3.2,3.4,3.1,2.9,3.3,3.5,33.4,4.2,3.6,3.6,3.0,3.1,3.8,3.5,3.4,3.3,3.9,2.0,3.8,3.5,33.2,4.0,3.1,2.6,4.2,3.4,3.5,3.2,3.5,3.1,3.4,3.1,2.8,2.4,2.8,2.5,3.0,3.0,3.9,3.0,2.7,3.1,2.9,3.4,3.5,3.9,3.7,3.3,3.1,2.8,2.7,4.2,2.9,3.6,3.0,3.7,1.4,3.4,3.5,3.4,3.4,3.4,3.8,3.4,3.3,2.4,3.0,3.0,3.1,3.4,2.3,3.0,2.4,3.6,4.0,2.0,3.5,3.2,3.8,3.3,3.8,3.0,3.0,3.5,3.4,4.1,3.5,3.1,4.1,3.8,3.5,3.0,2.4,3.5,3.0,3.5,1.5,3.9,2.6,3.0,0.9,3.4,3.4,2.5,3.4,2.8,2.7,2.8,3.2,3.5,2.7,3.2,1.9,3.2,4.0,2.5,3.2,3.2,3.2,3.2,1.6,3.2,2.9,3.9,3.2,3.8,2.8,2.0,2.7,3.5,3.0,3.4,3.5,2.7,2.9,3.0,3.5,3.0,2.3,3.3,2.7,3.8,3.5,3.1,3.0,3.1,3.0,2.6,2.0,3.15,2.9,3.1,3.0,2.9,2.9,3.7,0.6,3.4,3.2,3.4,3.4,3.5,3.6,3.3,3.0,2.9,3.1,2.9,2.5,3.9,3.2,3.2,1.2,2.6,1.7,3.4,3.2,3.3,3.6,1.9,1.5,2.7,3.5,3.0,3.1,2.7,3.7,3.0,3.8,3.4,3.6,3.7,3.8,1.5,2.7,1.4,2.2,4.0,4.0,3.0,3.6,3.0,2.2,3.1,3.5,2.0,2.8,4.0,3.2,3.5,3.6,2.8,2.6,3.6,3.4,3.4,3.5,3.1,2.5,3.4,3.2,2.8,2.8,3.1,2.9,3.1,3.3,2.6,2.7,3.8,1.6,2.8,3.1,3.6,3.4,3.1,2.6,3.5,3.5,2.8,3.2,3.8,4.5,4.4,3.0,3.2,3.1,3.5,2.7,3.2,3.0,2.9,2.7,2.3,2.8,3.0,4.0,2.1,3.2,3.1,3.2,2.7,3.3,3.4,3.3,3.0,3.5,4.1,3.0,3.2,3.1,3.1,3.1,3.3,3.4,3.8,3.2,2.6,3.4,3.0,3.2,3.4,2.9,3.5,3.1,3.0,3.2,2.0,2.2,3.0,2.6,3.0,3.5,3.2,4.5,3.4,3.4,3.0,3.0,3.9,2.7,3.5,2.6,3.9,3.9,3.4,3.0,3.5,1.5,3.0,3.1,3.0,2.9,3.0,3.3,2.2,3.3,3.8,3.5,2.5,3.2,3.1,3.6,3.4,3.0,3.6,3.8,3.6,3.6,2.7,3.0,3.1,3.5,3.2,3.2,1.7,3.9,2.0,3.0,3.3,3.9,0.8,2.9,3.4,3.5,3.6,2.7,3.0,3.3,2.1,2.1,2.1,2.9,3.1,3.5,2.8,3.5,3.6,3.0,3.5,2.4,3.5,3.3,3.2,3.6,3.2,3.2,3.2,3.3,3.3,1.4,3.3,3.3,3.0,3.3,3.5,3.8,3.2,2.2,3.2,3.2,3.0,3.8,2.7,3.3,3.8,2.4,3.9,2.9,3.0,3.9,3.0,3.0,3.0,3.0,2.9,2.9,2.9,3.2,3.4,3.8,3.0,3.5,3.6,3.6,2.5,3.1,3.2,3.4,3.0,2.9,3.0,3.4,2.7,3.3,4.5,2.0,3.7,3.1,2.6,3.2,2.8,3.6,0.7,4.4,3.9,3.7,3.6,2.8,4.0,2.1,3.8,2.8,3.2,3.2,3.0,3.5,2.0,3.4,2.3,2.3,3.1,3.3,2.3,3.4,4.3,3.4,3.0,2.6,2.7,3.5,2.5,2.7,2.5,2.5,2.5,3.9,2.9,4.0,3.0,3.2,3.1,3.0,2.8,3.0,3.1,3.4,2.3,3.6,2.5,3.8,2.8,2.8,2.4,3.0,2.7,2.3,2.1,3.3,4.2,2.7,2.8,3.4,3.5,3.7,1.3,3.6,2.8,3.6,3.4,3.5,2.3,3.8,3.2,3.4,3.1,4.0,2.6,3.9,3.1,3.5,3.2,1.9,3.6,2.8,3.0,3.2,3.1,3.2,3.4,3.5,2.5,3.0,2.8,2.9,3.2,2.8,0.7,3.3,2.7,3.4,4.6,3.5,2.5,3.3,2.5,3.0,3.6,3.6,4.0,3.1,3.1,2.9,2.7,2.2,2.3,2.5,2.9,3.0,3.6,4.0,2.6,2.0,2.4,3.4,2.6,2.7,3.3,3.6,3.2,2.7,3.7,3.5,2.7,4.4,3.1,3.0,3.4,3.0,3.1,3.9,3.8,3.0,3.0,3.0,3.2,3.5,2.8,2.8,2.9,3.0,2.1,2.4,3.4,3.8,3.2,2.4,2.8,2.7,3.2,3.2,2.7,2.8,3.4,1.4,4.0,0.2,2.8,3.6,2.7,2.8,3.3,3.1,3.8,3.1,2.5,2.6,3.8,3.8,3.3,3.1,3.2,3.0,2.9,4.1,4.1,2.7,3.4,2.8,3.3,3.1,3.9,2.9,3.2,3.2,3.0,2.5,2.9,3.9,35.0,33.0,30.0,31.0,30.0,29.0,33.0,32.0,34.0,3.3,2.9,3.9,3.3,2.6,3.5,3.1,2.7,3.1,2.9,3.7,3.8,3.0,2.2,3.7,3.6,3.1,3.7,3.0,3.5,3.6,3.4,3.4,3.3,3.5,3.5,3.4,3.3,3.5,3.5,3.4,3.4,3.4,3.5,3.1,3.7,3.5,3.5,3.3,3.5,3.6,2.7,3.0,3.2,3.2,3.3,3.8,4.3,3.3,2.9,3.0,2.7,3.2,3.0,3.2,3.5,3.1,3.5,2.8,3.0,3.2,3.5,3.4,3.9,3.1,3.4,3.5,3.4,3.1,3.2,3.5,2.9,3.4,4.1,3.9,4.1,3.1,0.7,3.6,2.0,3.5,1.5,3.1,4.3,3.2,2.6,3.5,2.5,3.2,2.0,4.2,3.0,3.0,3.0,3.8,3.3,3.7,3.2,2.2,3.4,3.0,3.7,3.8,3.7,3.5,3.5,3.0,3.5,3.2,3.6,3.1,3.0,3.5,3.5,3.5,3.6,3.0,3.1,2.4,3.0,4.0,3.7,1.3,2.2,3.2,2.9,3.9,2.6,2.7,2.9,1.2,4.3,3.1,3.0,3.3,3.5,2.8,4.1,3.3,2.1,3.5,2.7,3.5,2.9,3.8,3.0,3.4,3.4,2.2,3.1,3.0,2.7,3.5,3.2,3.0,3.2,3.6,2.7,3.3,1.9,3.4,2.9,3.3,2.9,3.0,2.7,3.3,1.0,3.5,3.3,3.4,3.0,3.5,3.1,2.6,2.9,3.0,3.6,3.6,2.9,3.5,3.2,3.6,2.3,3.4,3.4,3.1,3.0,3.0,3.5,2.7,3.9,3.4,3.3,3.4,3.1,3.4,1.8,2.7,3.1,3.0,3.5,3.4,2.7,4.4,2.9,3.2,2.9,4.0,3.7,3.0,3.1,2.9,3.1,2.9,3.5,2.5,3.6,2.1,2.7,2.8,2.9,3.4,4.0,3.9,2.9,2.5,3.5,2.0,2.9,2.5,3.5,2.5,3.2,3.5,3.2,3.0,3.0,2.0,4.0,2.9,3.5,2.9,3.0,3.0,3.2,4.2,3.0,2.7,3.4,3.8,3.3,2.5,3.0,3.3,3.0,3.0,3.0,3.8,3.1,1.4,2.6,3.6,3.3,2.7,3.3,3.5,2.5,3.0,3.3,3.9,2.6,2.3,2.0,2.9,3.6,2.7,3.5,4.0,3.7,2.2,2.7,3.4,3.7,3.7,3.7,3.4,3.6,2.5,3.2,2.9,3.2,5.0,3.5,3.0,3.6,3.2,3.5,3.6,3.5,3.0,3.0,3.3,2.7,3.8,3.7,3.1,2.2,2.3,3.3,3.8,3.1,3.3,3.8,3.2,3.1,3.3,2.3,1.8,3.2,3.7,3.5,3.0,3.4,4.2,3.7,3.6,3.1,3.7,2.9,3.8,2.0,3.8,2.0,1.9,3.4,3.8,3.5,2.6,3.3,2.7,2.7,2.9,2.6,3.6,3.0,3.2,3.3,1.7,2.7,3.5,2.8,3.3,3.2,3.2,3.1,3.4,3.3,3.4,3.2,3.1,2.2,3.8,4.3,3.6,3.0,2.9,4.2,3.3,3.4,3.3,2.7,2.9,3.1,3.4,1.4,2.5,3.6,3.5,3.1,3.1,4.2,3.8,4.3,3.6,3.1,2.7,2.5,3.3,3.5,3.0,3.5,3.6,2.7,4.1,2.6,3.5,3.0,2.3,2.6,4.0,3.5,3.3,2.5,2.9,3.5,3.1,3.8,3.3,3.3,3.6,2.5,3.2,3.0,3.5,3.6,2.9,3.4,2.8,3.5,2.7,2.2,3.3,4.3,3.8,2.8,3.1,3.1,3.4,3.0,2.2,4.0,3.4,1.7,3.5,4.0,3.3,2.5,3.1,3.2,2.7,2.9,3.6,3.2,3.1,3.6,3.1,3.4,3.0,3.4,3.7,3.2,3.4,3.0,3.6,3.0,3.1,3.2,5.3,3.3,3.3,3.4,2.6,3.0,3.3,3.4,3.0,3.7,3.2,3.2,3.9,3.1,3.1,3.1,3.3,3.1,3.2,3.6,3.3,2.7,3.0,2.3,3.8,3.6,4.5,3.5,3.1,3.9,3.0,3.4,3.0,3.3,3.8,1.2,3.0,3.0,4.0,3.0,3.1,2.3,3.1,2.7,3.6,3.1,3.5,3.3,3.0,3.2,3.0,3.1,3.5,2.9,3.2,2.3,3.3,3.2,3.3,3.7,3.3,2.7,2.2,3.4,4.0,3.0,3.0,3.0,2.7,3.0,2.7,3.4,5.3,3.8,3.4,2.2,2.4,2.8,2.5,2.5,3.6,3.1,3.8,3.8,3.1,2.9,2.0,3.5,4.0,3.5,3.3,1.8,3.1,3.3,3.4,3.0,4.0,1.5,2.6,3.0,3.2,3.0,3.8,2.9,3.5,3.9,0.8,3.0,2.8,3.8,3.5,3.2,2.7,3.0,3.2,3.0,2.8,3.1,3.5,3.6,3.9,2.7,3.2,2.8,3.6,2.8,2.7,3.9,3.8,3.1,3.1,3.6,3.4,3.3,2.5,3.6,2.0,1.6,3.2,3.0,1.8,3.0,3.0,2.5,3.2,3.0,3.5,3.0,2.9,3.4,3.0,3.8,3.7,3.2,3.4,3.5,3.7,3.2,2.2,3.2,3.8,2.7,2.7,3.1,3.4,3.0,3.4,3.5,3.4,2.9,3.6,2.5,2.7,3.6,3.8,2.5,2.7,3.2,3.5,3.0,3.0,3.0,2.3,1.3,3.8,3.2,3.1,3.2,3.6,3.0,3.1,3.2,3.0,3.9,3.8,2.8,3.5,3.2,3.2,3.2,3.1,3.3,2.2,3.1,3.3,3.1,3.1,3.0,2.7,2.7,2.5,4.7,3.3,3.5,2.7,3.4,3.9,3.1,3.3,3.0,3.6,2.6,3.7,0.6,3.2,3.1,3.6,3.5,2.9,3.4,3.1,2.3,3.2,3.1,3.4,3.2,3.1,3.1,3.1,3.5,3.8,3.0,4.2,3.0,2.7,3.4,3.0,3.2,3.4,3.0,2.5,3.0,2.7,2.9,2.8,10.7,2.2,2.7,3.5,3.4,4.3,3.2,3.6,3.5,2.9,3.5,3.0,11.0,2.6,3.5,3.2,3.0,3.0,3.0,3.0,3.0,3.4,3.4,2.9,3.9,3.0,3.0,2.7,3.3,3.2,2.7,4.0,3.4,3.1,3.6,3.1,2.8,3.4,3.6,2.7,3.3,3.0,3.2,3.3,3.5,3.8,0.9,3.5,3.5,3.8,2.8,3.0,3.0,1.9,2.8,2.2,3.0,3.2,2.1,2.1,3.2,3.5,3.53,2.4,3.0,2.7,2.7,3.5,2.8,2.7,3.2,3.7,3.1,3.3,3.9,3.5,3.5,3.6,3.1,3.2,2.8,3.0,3.5,3.8,3.6,3.3,3.3,2.8,3.6,1.8,3.2,3.0,2.9,3.8,3.5,3.5,3.4,2.7,2.6,3.0,3.1,3.0,3.2,2.2,3.6,3.6,3.2,3.1,2.7,3.1,3.2,3.0,3.8,3.0,2.0,3.7,3.8,3.2,1.8,3.2,3.2,3.2,3.0,2.5,3.3,3.5,3.8,3.1,3.5,3.2,3.2,3.0,2.0,2.8,2.5,3.5,2.8,3.2,2.9,2.1,3.8,3.1,2.5,3.2,2.2,3.7,3.2,2.6,2.9,2.9,3.1,2.4,3.7,4.0,3.0,2.8,2.7,3.6,2.7,3.1,2.9,3.2,3.2,3.1,4.1,3.1,2.9,3.2,3.0,2.7,2.8,2.5,2.6,3.2,3.6,5.5,5.0,3.2,3.8,1.2,2.5,3.5,3.6,2.6,3.0,2.8,2.7,3.6,3.3,3.7,2.8,3.1,2.6,2.6,3.2,3.5,2.8,3.0,2.4,3.6,3.2,3.0,3.0,2.5,2.8,2.7,2.9,3.3,3.6,3.1,3.3,3.0,3.0,2.8,2.7,3.2,2.3,3.6,3.6,3.2,3.1,3.2,3.2,3.0,3.3,3.4,1.2,2.3,3.2,2.7,3.6,3.7,1.7,3.4,2.7,3.5,3.3,2.8,3.3,2.8,2.7,4.1,3.2,3.0,2.2,3.1,3.8,3.4,1.6,3.3,2.9,3.1,3.5,3.1,3.7,3.2,3.7,2.6,1.7,1.5,3.3,2.5,3.1,3.6,3.6,3.8,3.8,3.6,3.5,3.3,3.7,3.5,2.1,3.1,3.3,2.8,3.2,3.3,3.4,4.0,2.8,2.9,3.9,4.5,4.5,3.7,2.1,2.8,3.5,3.3,3.7,3.52,3.0,3.6,2.7,2.2,3.6,2.7,2.5,3.8,3.0,2.8,3.0,2.8,3.5,3.5,3.5,2.5,2.9,3.6,3.5,0.5,3.2,3.3,3.0,3.0,1.0,3.0,2.8,2.9,3.2,4.1,3.1,3.9,3.9,3.0,2.9,3.3,3.6,3.0,3.1,3.9,3.0,2.2,3.4,3.0,2.3,3.0,3.5,3.1,2.2,3.3,2.9,3.3,3.0,3.8,3.5,3.6,3.7,3.5,3.6,2.4,2.4,3.4,2.8,2.7,3.2,3.0,3.5,1.5,2.7,3.4,3.1,3.6,3.2,3.5,2.8,3.7,3.2,3.0,3.8,2.5,3.5,4.0,3.0,3.0,2.6,1.1,3.2,3.1,3.9,3.0,3.3,3.4,2.8,3.4,2.8,3.4,2.8,2.5,2.8,3.6,2.5,3.5,3.0,2.6,3.5,2.9,3.8,2.9,3.1,2.4,2.4,2.9,3.3,3.9,2.9,2.1,2.8,2.4,2.8,3.5,3.0,2.2,3.0,4.2,3.0,3.2,3.2,2.5,4.0,2.2,2.5,4.0,2.7,3.4,1.2,3.7,3.2,4.3,3.1,2.8,2.8,3.0,2.9,3.5,3.0,3.0,2.5,3.6,3.0,2.5,3.6,2.6,3.2,3.6,2.6,3.1,3.3,3.1,2.5,2.6,3.4,2.7,3.5,3.6,3.4,3.0,3.4,3.0,1.5,3.0,3.2,4.1,3.7,3.7,3.0,2.8,3.5,1.9,3.4,2.3,3.7,3.7,3.9,3.4,3.4,3.4,3.2,3.4,2.3,2.6,2.5,3.1,3.7,3.5,3.6,2.5,3.4,2.4,3.7,3.2,3.4,3.0,3.8,3.5,3.2,3.1,2.8,3.5,3.2,3.9,3.2,3.3,2.7,2.8,2.6,3.2,2.8,2.8,3.3,3.5,3.1,2.9,3.3,3.0,2.4,2.7,2.0,3.0,3.4,3.7,3.7,2.8,3.1,2.8,3.4,3.0,3.0,3.4,3.6,3.4,3.4,3.8,2.8,3.3,3.9,3.4,3.7,1.6,2.5,2.7,3.5,3.2,2.5,3.5,3.2,3.1,3.3,3.1,2.2,3.7,2.8,3.4,2.5,3.5,3.3,3.5,2.8,3.1,7.6,3.2,3.5,3.5,3.9,3.1,3.1,3.7,3.3,3.0,3.9,3.0,3.3,2.9,1.1,2.7,3.1,3.7,3.1,3.6,3.2,2.4,3.3,3.2,3.5,3.2,2.5,3.6,1.5,3.2,2.6,3.5,3.5,3.0,2.7,3.2,3.1,3.3,3.0,2.7,2.9,3.0,3.2,3.4,3.7,2.5,2.8,3.4,3.1,3.1,2.6,3.7,2.9,3.4,3.5,2.0,3.5,3.5,2.2,2.0,3.4,2.7,2.8,2.8,3.5,3.7,2.7,3.0,2.6,3.0,2.9,1.9,3.7,3.3,2.8,3.6,3.7,3.4,3.3,1.1,2.5,2.9,2.8,3.6,1.6,3.5,3.3,3.5,3.5,2.9,3.0,3.3,3.0,3.4,2.5,2.2,3.4,2.6,3.0,3.2,3.1,2.5,2.7,3.5,1.5,3.7,3.0,3.0,2.6,2.9,3.6,2.8,3.0,4.0,3.3,2.8,3.4,2.9,2.9,2.9,2.9,3.4,3.5,3.0,2.4,3.0,3.3,3.1,3.5,3.2,3.2,3.5,4.1,3.7,3.2,3.5,2.8,3.9,3.4,3.5,3.5,3.5,2.5,2.5,2.9,3.6,3.4,3.5,3.2,3.9,3.2,3.1,3.4,4.0,3.5,3.4,3.0,3.2,3.5,2.5,3.3,3.4,3.6,3.1,3.4,3.3,2.9,3.0,2.4,3.5,3.4,3.4,3.5,3.2,2.8,3.5,3.1,3.0,3.2,3.2,3.4,2.2,3.5,3.5,3.4,2.8,2.9,3.0,3.3,2.0,3.6,2.3,3.3,3.2,3.3,3.5,3.3,2.6,3.5,3.7,3.5,3.5,3.5,2.2,3.0,3.0,3.0,3.2,2.5,3.8,2.2,3.4,3.4,3.1,3.1,2.7,2.7,3.1,4.2,2.0,3.9,3.9,3.2,2.1,2.8,3.3,3.8,3.3,3.4,2.4,1.7,3.5,3.1,3.4,2.5,3.0,2.9,2.8,2.9,3.5,3.0,3.0,3.1,2.9,3.0,3.3,2.6,3.0,3.0,3.9,3.4,3.2,3.8,3.0,3.3,3.5,3.9,3.0,3.1,3.5,2.8,3.2,3.3,2.7,3.2,3.2,2.9,2.4,3.2,3.5,3.4,3.2,3.4,3.0,2.8,3.8,3.6,3.2,3.4,3.3,1.0,3.2,3.4,2.5,3.1,3.4,3.0,3.2,3.7,2.5,3.1,3.4,3.5,3.4,3.0,3.1,3.9,3.1,3.2,3.3,3.4,3.1,2.7,3.0,2.8,2.6,3.2,3.4,3.3,2.5,3.0,3.7,2.9,2.9,3.4,2.8],\"type\":\"box\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}}},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('cc0726e9-1e91-46bd-b5b7-c281da069eba');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "source": [
        "df = df[(df['PESO'] <= 8.8) & (df['PESO'] >= 2)]"
      ],
      "cell_type": "code",
      "metadata": {
        "id": "eSaevF3NRpb_"
      },
      "execution_count": 166,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "fig = go.Figure(data=[go.Box(y=df['PESO'], name='PESO')])\n",
        "fig.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "id": "XXam3tmPRJ7V",
        "outputId": "37f24a90-f2fc-4ff0-cd6c-1f327ef1df84"
      },
      "execution_count": 167,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.24.1.min.js\"></script>                <div id=\"790b756a-9919-4424-a80e-e7164e32f25d\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"790b756a-9919-4424-a80e-e7164e32f25d\")) {                    Plotly.newPlot(                        \"790b756a-9919-4424-a80e-e7164e32f25d\",                        [{\"name\":\"PESO\",\"y\":[3.1,2.8,2.4,3.9,3.0,3.2,3.1,3.1,3.1,3.3,2.1,3.0,3.5,3.5,3.2,3.4,2.1,3.5,3.0,2.8,2.8,3.0,3.6,3.4,3.4,3.8,3.4,3.3,3.4,2.6,2.5,3.5,4.0,2.4,3.4,2.7,2.2,3.5,3.5,3.4,3.1,2.7,2.8,3.5,2.7,2.8,3.3,2.2,3.4,3.2,3.9,3.1,3.5,3.3,2.5,2.5,3.2,3.4,3.6,3.7,3.5,2.2,3.1,3.9,3.7,2.2,3.2,3.5,2.9,3.4,3.0,2.0,3.0,3.4,3.3,3.3,3.5,3.4,3.1,3.6,3.6,2.3,2.8,3.1,2.9,3.9,3.93,4.0,3.4,3.3,3.4,2.2,2.8,3.2,3.0,3.0,3.0,2.9,3.8,3.4,3.6,2.6,3.2,3.0,2.0,5.2,3.4,3.4,3.1,3.5,3.3,3.3,3.4,3.2,3.3,3.9,3.1,3.5,2.8,3.0,2.3,2.9,3.1,3.1,3.1,3.1,3.0,3.0,3.2,3.8,3.2,3.1,2.9,2.7,4.0,3.0,3.4,2.5,3.4,3.5,3.0,3.0,2.8,3.5,3.0,3.1,2.0,2.8,3.6,3.4,3.0,2.5,3.6,2.4,3.6,3.0,3.4,3.7,2.8,2.3,3.3,3.3,3.4,3.1,2.6,3.7,3.3,3.0,3.6,3.8,2.8,3.5,3.5,2.2,3.5,3.2,3.2,3.5,3.1,3.1,3.6,2.7,3.2,2.5,3.2,3.0,3.7,2.9,3.7,3.4,3.0,3.0,3.9,3.5,2.2,2.2,2.2,3.0,3.0,3.2,3.1,3.5,3.2,2.8,2.8,2.3,2.6,3.3,4.5,2.7,2.5,3.9,3.0,3.6,3.2,3.2,2.9,3.3,3.0,3.4,2.5,2.9,3.6,3.3,3.1,2.8,2.3,2.7,2.7,3.0,3.0,3.1,3.9,2.5,2.1,3.4,2.9,2.5,3.6,3.3,2.9,3.4,3.1,2.9,3.4,3.0,3.4,4.2,3.6,3.4,2.7,2.8,3.1,3.1,3.1,2.7,2.9,3.0,3.1,2.5,2.7,3.0,2.5,3.5,3.2,2.5,2.8,2.6,2.9,3.5,3.0,2.8,3.2,3.5,3.6,3.2,3.6,2.9,4.0,3.0,3.8,3.1,3.1,3.5,2.0,2.8,3.0,3.7,2.7,3.8,3.5,3.8,3.5,3.4,2.7,3.1,3.0,3.0,3.4,3.0,3.7,2.8,3.2,3.6,2.9,4.0,3.0,2.9,3.8,3.2,3.1,2.9,3.3,3.8,4.0,3.0,3.9,3.1,2.7,3.1,3.0,3.5,2.9,2.9,3.0,3.2,3.3,3.0,3.2,3.4,2.2,2.2,3.0,3.5,3.6,3.0,2.9,3.5,2.7,3.6,3.6,3.2,3.1,2.6,3.6,3.6,3.3,3.4,2.8,4.0,3.6,3.0,3.1,3.2,2.7,2.8,3.8,8.6,3.8,3.0,3.9,2.9,3.4,2.7,2.9,3.0,2.2,3.5,3.2,2.6,3.1,3.3,3.8,3.0,2.3,3.4,2.8,2.6,3.6,3.0,3.0,2.9,3.1,2.9,2.8,4.1,2.7,2.0,3.1,3.0,3.5,3.1,2.8,3.4,3.4,3.7,3.3,2.9,3.5,3.1,3.3,3.0,3.1,3.1,3.0,3.0,3.2,3.2,3.9,3.5,3.5,3.4,3.6,2.6,3.0,3.3,3.2,4.0,3.1,3.5,2.8,3.5,2.9,3.5,3.5,3.5,4.2,3.0,2.6,4.0,2.6,2.6,3.9,2.9,3.5,2.6,3.8,3.0,2.9,3.3,3.2,3.4,3.9,3.3,4.9,3.8,3.2,2.7,3.2,2.2,3.2,3.5,2.6,3.9,4.0,3.1,4.1,3.5,2.6,3.4,3.3,2.9,3.3,3.2,3.6,3.6,3.1,3.0,3.9,2.7,3.3,3.0,2.5,3.3,3.0,2.6,3.6,2.5,2.6,3.0,2.9,3.2,3.2,2.5,2.6,3.0,3.2,2.2,3.5,2.2,3.5,3.1,2.7,3.1,2.7,3.1,3.3,2.7,2.7,2.7,2.4,2.3,2.7,2.6,3.0,3.7,3.0,3.3,2.8,3.5,2.9,3.0,2.6,2.2,2.6,3.5,3.4,2.4,2.7,2.5,3.5,3.3,3.2,2.7,3.2,3.8,3.0,3.2,3.3,3.6,2.6,2.8,2.9,2.0,2.9,3.2,3.4,3.1,3.1,3.1,2.8,3.1,3.5,2.8,3.1,3.0,3.0,2.5,3.3,3.4,3.3,2.5,3.2,3.3,2.8,3.0,2.9,3.5,3.5,3.6,3.6,3.3,3.7,3.0,3.3,2.9,3.5,3.1,3.1,3.6,2.8,4.1,3.1,3.7,3.0,2.6,3.0,3.6,3.2,2.9,3.0,4.2,2.5,2.7,3.2,3.6,3.2,3.3,3.3,2.0,3.7,2.7,3.0,3.7,2.0,2.5,2.6,3.0,2.9,4.1,2.5,3.8,3.2,3.1,3.5,3.1,2.9,2.7,3.1,3.3,3.5,2.9,3.1,3.2,3.7,3.2,2.7,2.2,3.0,3.5,3.0,3.5,3.8,3.4,3.8,3.4,3.6,2.7,3.3,3.4,2.7,2.6,3.3,3.7,3.0,2.9,3.3,3.5,3.2,2.8,3.6,3.2,2.3,3.3,3.4,3.4,3.8,2.3,3.3,3.5,3.0,3.4,3.3,3.2,2.6,3.0,3.0,3.0,3.0,3.0,3.1,2.5,3.4,4.0,2.3,3.1,2.7,2.2,3.4,3.3,3.4,3.4,3.3,3.1,2.9,3.5,2.3,3.0,3.4,2.8,2.9,3.1,3.0,3.0,2.5,3.0,3.0,3.0,3.0,3.0,3.3,3.2,2.7,3.0,3.4,3.2,2.7,3.0,3.4,3.5,2.5,3.0,2.8,2.8,3.2,2.9,3.2,2.8,3.5,3.8,2.7,3.6,3.4,2.4,2.3,3.7,2.8,3.7,3.3,3.5,3.5,3.1,3.6,3.3,3.5,3.4,3.4,3.6,3.4,2.7,2.7,3.8,3.5,3.1,2.0,3.5,3.3,3.0,3.5,3.2,3.4,3.4,4.0,2.27,3.2,3.0,4.0,3.2,3.2,3.0,2.8,3.0,3.0,2.8,3.2,3.0,3.5,3.1,3.0,3.3,3.1,3.1,2.5,2.7,3.6,4.0,2.7,3.0,2.0,3.5,3.1,2.9,2.8,3.2,3.2,3.0,4.1,3.5,3.0,3.7,3.0,3.5,4.9,3.2,3.0,4.0,3.8,3.4,3.5,3.4,3.7,3.0,3.2,3.4,2.9,3.4,3.9,4.0,2.5,3.0,2.9,3.0,2.2,3.2,3.1,3.6,3.4,2.9,3.1,3.1,3.0,2.5,3.5,4.0,3.4,3.9,3.5,3.5,4.0,2.6,3.3,3.4,3.4,3.4,3.0,3.5,3.2,3.0,3.0,4.0,3.7,3.3,3.6,3.2,3.0,2.7,3.6,2.7,2.7,3.6,3.1,3.1,3.6,3.6,3.0,2.9,3.3,3.8,3.8,2.9,2.8,4.5,2.9,3.4,3.5,3.6,2.9,4.0,3.0,3.0,2.3,3.5,2.1,3.0,2.9,3.6,3.3,3.2,3.2,3.6,4.0,2.7,3.6,3.6,3.6,3.6,3.3,3.5,3.1,3.1,3.3,3.5,3.5,3.7,3.3,3.0,3.0,2.3,3.4,2.8,2.7,3.3,2.8,3.1,3.2,3.0,3.0,3.0,3.6,3.5,3.0,2.6,3.2,3.2,2.7,3.1,3.1,3.6,3.5,2.7,3.2,3.2,3.3,4.0,3.1,2.8,3.3,3.3,3.0,3.4,3.0,4.0,2.9,3.3,3.2,3.6,3.4,3.6,3.1,3.4,3.2,3.0,3.9,3.3,3.2,4.0,3.5,3.5,3.3,4.3,3.3,3.4,3.6,3.0,4.3,3.0,3.1,2.7,3.1,3.2,4.0,3.2,3.5,3.0,3.8,3.2,2.5,3.0,3.6,3.0,4.5,3.5,3.2,2.4,3.2,2.5,2.5,2.8,3.5,3.0,3.0,2.8,2.6,3.7,3.0,3.3,3.2,3.5,3.5,3.5,3.1,3.6,3.1,3.1,3.2,3.1,3.4,3.1,2.5,2.6,3.0,3.1,2.9,2.8,3.3,3.5,3.3,3.5,3.4,3.5,3.1,3.2,3.0,2.7,3.7,3.5,3.6,3.5,3.7,2.8,3.5,3.6,3.5,3.0,3.3,3.4,2.9,3.4,2.5,2.0,2.9,3.4,2.3,4.2,4.3,2.0,2.5,3.1,2.8,3.7,3.3,2.9,3.9,3.0,4.0,3.3,3.2,3.8,3.2,4.2,3.5,3.2,3.9,2.8,3.2,3.5,3.3,3.4,3.4,3.5,3.0,3.4,4.6,3.0,3.0,3.0,3.5,3.0,3.6,3.2,3.0,3.1,2.9,2.9,3.4,3.6,2.9,3.2,2.1,3.4,2.9,3.6,2.3,3.8,2.9,4.0,3.7,3.6,3.6,2.7,3.9,3.2,2.7,3.2,3.1,2.5,3.2,3.5,2.5,3.2,3.2,3.2,4.0,3.5,2.9,2.5,2.8,3.6,3.5,3.6,3.3,2.9,3.0,3.2,3.8,3.5,3.5,2.4,3.5,2.3,3.0,3.8,3.3,3.5,3.2,3.0,3.5,3.1,2.2,3.3,2.5,3.4,2.4,3.0,3.8,3.6,3.6,2.7,3.1,2.5,2.7,2.7,3.4,2.8,2.8,3.7,3.3,3.7,3.5,5.0,3.0,3.2,3.2,3.0,3.2,3.0,3.5,3.9,3.4,4.0,3.9,2.9,3.4,3.1,3.5,2.2,3.1,3.5,3.4,3.1,3.6,3.6,3.3,3.6,3.6,3.4,3.0,3.0,3.3,3.6,3.2,2.7,3.4,3.1,2.7,4.7,2.8,3.0,4.0,3.4,2.7,3.4,2.0,2.7,3.5,3.4,2.7,3.0,2.0,2.2,3.4,3.4,2.9,2.5,3.6,2.5,2.7,2.8,2.4,3.2,2.7,3.4,3.0,3.1,2.8,3.2,3.2,3.4,3.1,3.6,3.0,2.5,3.4,2.9,3.0,2.3,2.4,3.5,2.5,2.5,3.0,3.0,3.0,2.2,3.6,3.6,3.1,3.6,3.4,3.4,2.5,2.7,3.3,3.5,2.1,3.2,3.5,3.4,2.0,2.9,2.8,3.4,3.8,4.2,3.3,3.4,2.7,2.9,3.7,2.2,3.2,3.4,2.9,3.2,3.3,2.8,4.4,2.9,3.2,3.5,2.5,2.3,3.5,2.7,3.5,2.0,3.0,3.2,3.9,3.1,2.4,3.6,2.2,2.8,3.4,2.7,3.3,3.5,2.6,3.6,3.3,3.3,3.4,2.2,3.6,3.9,2.8,3.0,2.7,3.4,3.6,3.0,3.0,3.3,2.3,2.6,3.2,3.2,3.2,3.6,4.0,2.6,2.6,2.0,2.7,3.1,3.0,3.1,3.1,4.0,2.5,3.4,2.4,3.0,3.2,3.0,2.5,3.1,3.5,3.0,3.1,3.4,3.9,3.3,3.3,3.8,2.9,2.3,3.0,2.4,3.0,3.2,3.2,3.0,3.3,3.5,3.2,2.8,3.9,3.4,3.5,3.7,3.8,2.7,3.5,2.6,2.7,3.4,2.5,3.0,5.6,3.0,3.0,2.5,5.2,3.4,3.5,2.0,3.3,4.0,3.0,3.9,2.9,3.5,3.1,3.2,3.4,3.2,2.9,3.6,2.6,3.7,2.6,3.4,3.0,3.8,2.7,3.3,2.7,3.4,2.6,2.6,2.6,3.1,3.3,3.4,2.7,3.0,3.9,2.5,2.5,3.0,3.5,2.9,3.2,2.7,3.2,3.8,3.9,3.2,2.7,2.2,3.1,3.6,2.5,2.7,2.6,3.9,2.9,3.5,2.5,3.4,3.0,3.4,3.0,2.6,3.4,3.0,3.6,2.7,2.7,2.8,3.0,3.0,3.3,3.4,3.5,3.2,2.8,3.6,4.5,3.2,3.5,2.0,3.2,3.7,3.5,3.0,3.9,3.7,3.0,2.7,3.0,2.7,3.4,3.5,2.5,2.5,3.2,3.8,2.7,3.8,2.7,3.4,3.4,3.0,3.5,3.0,3.2,2.3,3.5,3.1,3.0,3.6,3.3,3.0,3.0,3.4,3.9,2.7,3.0,3.3,3.2,3.0,3.3,3.4,3.0,2.4,3.5,3.0,3.2,2.8,3.0,3.3,3.5,3.0,3.0,3.0,3.1,2.6,3.6,3.2,3.1,3.0,3.4,3.6,4.0,3.0,3.0,3.0,3.1,2.9,3.8,3.7,3.4,3.3,3.5,3.3,2.9,2.7,2.0,3.7,2.5,3.0,3.2,2.5,4.0,3.0,3.2,2.1,2.8,3.7,3.5,2.6,3.4,3.0,4.0,3.5,3.5,3.2,3.2,2.2,3.4,3.9,3.7,3.0,3.5,3.6,3.2,3.3,2.9,2.4,3.0,2.9,3.1,3.9,3.8,2.8,3.0,3.4,2.7,3.5,3.1,2.7,2.9,3.1,2.7,3.5,3.6,2.6,4.0,3.0,2.7,3.2,3.1,2.7,3.4,3.6,2.6,4.0,3.0,2.7,3.2,3.0,3.0,3.4,3.1,4.1,3.4,2.6,2.8,3.2,3.3,2.5,2.8,4.6,3.2,3.3,2.9,2.8,3.8,3.5,3.4,2.8,3.9,3.7,3.3,2.3,2.4,3.0,2.7,3.9,3.0,3.58,3.7,3.1,3.0,2.8,2.7,3.5,3.0,3.5,2.8,2.7,3.4,3.4,3.5,3.2,2.5,3.8,3.5,3.2,2.3,2.7,2.7,3.0,3.1,2.7,3.3,3.0,3.3,2.0,3.4,3.4,3.2,2.8,3.4,3.1,3.7,3.5,3.6,2.8,3.4,2.7,3.5,3.3,2.5,2.5,3.5,3.3,3.1,3.4,2.7,3.8,2.5,2.8,3.1,3.0,3.4,3.4,3.3,3.8,3.9,3.4,3.0,2.6,3.0,4.0,3.1,2.8,2.4,3.0,3.3,3.7,2.2,3.1,3.5,3.6,3.2,3.3,3.0,2.8,3.5,4.1,3.4,3.0,2.6,3.0,4.0,3.1,2.8,2.4,3.0,3.3,3.7,2.2,3.1,3.5,3.6,3.2,3.3,3.0,2.8,3.5,4.1,3.3,3.0,2.9,3.3,2.7,2.6,2.9,4.2,2.8,3.1,3.0,3.4,3.2,2.5,3.6,2.5,3.7,3.4,3.3,3.3,3.5,2.1,3.5,4.2,3.3,2.3,3.3,3.0,2.8,4.3,3.5,3.2,3.8,3.6,2.2,2.9,3.1,2.7,3.3,2.8,3.0,2.4,3.4,2.4,3.6,2.8,4.1,3.0,2.8,3.8,3.0,3.0,3.6,2.7,2.8,2.8,3.2,2.8,3.8,2.1,3.0,3.5,3.0,3.5,4.0,3.5,3.5,4.1,4.4,2.9,3.3,3.0,3.1,3.2,3.6,3.0,3.5,3.5,2.5,3.0,2.9,3.3,3.0,3.2,2.9,3.0,2.7,2.4,3.0,2.8,2.5,3.2,3.1,3.0,3.3,3.4,2.2,3.5,2.1,2.3,2.0,3.5,2.6,3.5,2.5,3.2,2.9,3.0,3.2,2.6,3.4,2.8,2.6,2.8,2.8,2.7,3.1,3.7,3.3,3.4,3.5,4.0,3.2,3.4,3.1,3.0,3.5,3.0,3.4,2.0,3.3,3.6,3.9,3.6,3.8,3.6,2.7,4.0,3.4,2.6,3.0,3.2,3.6,2.7,3.11,2.6,2.1,3.1,3.2,2.7,2.6,2.7,3.6,3.1,3.5,4.1,3.3,3.0,3.0,3.8,3.0,3.0,4.9,2.5,3.3,3.6,3.5,2.8,2.6,2.7,3.4,3.0,3.7,2.7,3.4,2.8,2.8,2.8,3.5,3.0,3.2,4.0,2.2,3.0,2.6,2.5,3.1,4.0,3.1,3.2,3.5,2.5,3.3,2.7,3.1,3.0,3.0,2.8,3.0,3.3,3.5,2.7,3.4,3.2,2.3,3.4,3.5,3.3,3.2,2.4,2.5,2.7,3.6,2.5,3.0,2.9,2.4,3.2,3.2,3.0,3.6,3.4,3.7,2.7,3.2,3.6,3.0,2.6,3.3,2.3,2.6,2.9,3.6,3.5,3.0,2.7,2.8,3.3,3.2,3.2,3.4,3.4,2.9,2.6,2.3,2.6,3.0,3.2,3.0,3.0,2.8,3.2,3.8,2.6,3.2,3.2,3.4,3.3,2.8,3.0,3.7,3.2,2.4,3.5,3.5,2.5,3.2,2.7,3.8,3.2,3.2,3.6,3.6,3.5,2.5,2.7,2.6,2.7,3.6,2.0,2.9,3.0,3.0,3.0,3.2,3.2,2.6,3.2,3.2,3.6,3.6,3.0,2.5,3.1,3.2,3.0,3.1,3.7,2.7,2.6,2.7,3.3,3.3,3.2,4.2,2.7,3.2,3.0,2.7,3.0,2.7,3.4,2.5,2.7,2.7,2.3,3.5,3.7,3.5,3.2,2.7,3.4,2.6,3.1,2.7,2.7,3.4,2.6,3.4,3.6,2.9,3.2,2.4,3.2,3.2,2.8,3.3,3.3,3.2,3.2,3.5,2.7,3.3,3.4,3.3,3.1,3.6,3.1,2.9,3.5,3.4,2.0,3.5,3.5,2.0,3.0,2.5,2.5,3.0,6.0,3.2,3.3,4.1,3.4,3.3,3.0,2.7,2.3,3.1,3.4,3.0,2.8,3.1,3.3,2.1,2.7,3.3,3.2,3.5,2.6,2.5,2.7,3.2,2.7,2.5,3.2,3.5,2.9,2.0,3.4,3.2,3.5,3.5,2.9,2.6,2.6,2.9,3.5,3.4,3.5,2.8,2.5,3.5,2.2,3.7,4.7,3.2,3.8,3.5,3.3,3.0,2.8,3.6,3.1,3.0,3.3,2.9,3.5,3.5,3.2,3.6,3.1,2.8,2.8,3.7,2.6,3.7,3.6,2.2,2.6,3.0,3.0,3.5,2.2,2.6,3.0,3.0,3.0,3.5,2.7,2.6,3.1,3.0,2.9,3.5,2.8,3.4,3.7,3.0,2.8,2.9,3.4,3.0,3.0,3.0,3.0,2.0,6.0,4.0,4.0,2.0,2.0,3.0,5.0,3.0,3.0,7.0,4.0,2.0,5.0,2.0,3.0,8.0,4.0,3.0,4.0,3.2,3.7,2.36,2.8,2.1,3.0,2.6,3.3,3.8,3.7,3.2,3.1,2.36,3.3,2.6,4.2,2.5,3.5,4.1,3.2,3.1,4.4,3.0,3.1,3.0,2.5,2.1,3.4,2.5,2.1,3.0,3.4,3.4,3.0,3.2,3.3,2.6,3.5,2.3,2.3,2.6,3.5,3.0,3.0,3.58,3.8,3.6,3.5,3.9,2.9,3.5,3.4,2.7,3.5,2.8,2.1,3.1,3.8,2.9,3.2,3.55,3.2,3.4,3.3,3.7,2.8,4.1,3.0,3.3,2.5,4.0,3.5,3.2,3.2,2.8,3.0,3.7,3.3,3.6,3.0,3.7,2.9,3.2,2.5,2.1,2.8,2.9,3.2,3.1,3.6,3.0,2.2,3.1,3.1,3.2,3.1,3.9,2.7,2.7,3.3,3.7,3.2,3.8,3.0,3.6,3.0,2.6,3.2,3.4,2.6,2.5,3.9,2.4,2.8,3.2,4.2,3.0,2.2,2.7,3.3,3.2,2.9,3.4,3.2,4.0,3.6,3.1,3.3,2.9,3.0,3.0,2.6,3.5,3.9,3.0,3.9,3.0,2.9,4.0,2.9,3.8,3.1,3.1,3.4,3.6,3.2,2.9,3.4,4.0,3.8,2.8,4.1,3.5,3.5,3.0,3.0,3.4,2.7,2.9,2.7,2.6,3.4,2.9,3.4,2.3,2.5,2.7,3.8,3.1,2.9,3.8,2.6,3.0,3.0,2.5,2.5,4.0,3.0,3.0,3.0,3.2,3.1,3.0,2.5,3.6,3.6,2.6,3.6,3.3,3.4,3.4,2.9,3.0,2.5,2.8,3.0,3.4,3.1,3.2,2.9,3.0,2.7,2.6,2.7,3.0,2.8,3.8,3.4,3.1,2.2,3.2,2.8,2.9,2.6,3.2,3.5,3.0,3.6,3.0,2.9,3.4,3.8,2.9,3.4,2.7,2.6,4.0,3.1,3.1,3.6,3.9,3.0,3.2,3.4,3.4,3.0,2.8,2.4,2.8,2.2,2.9,2.3,4.0,3.4,3.4,3.4,2.9,2.8,3.3,3.3,2.8,3.8,2.7,3.0,3.5,3.4,3.1,2.7,3.4,2.8,2.8,3.0,3.2,3.6,2.7,3.4,3.5,3.6,3.2,2.1,2.9,3.9,3.4,2.6,3.3,2.7,3.6,3.5,3.1,2.8,3.2,3.0,3.0,3.4,3.5,3.2,3.0,3.4,3.4,4.3,3.2,3.2,3.3,3.3,3.3,2.7,3.5,2.5,3.6,3.2,4.1,3.2,3.0,2.2,3.1,3.8,3.4,3.3,2.9,3.1,3.5,3.1,3.7,3.2,3.7,2.6,3.3,2.5,3.1,3.6,3.6,3.8,3.8,3.1,3.7,3.2,2.8,3.4,3.1,2.9,2.4,2.9,2.8,2.3,3.2,3.7,3.1,3.1,3.6,2.5,3.2,3.1,3.6,3.5,2.5,3.0,4.2,4.2,3.2,3.1,3.0,2.2,3.22,3.3,3.8,3.6,3.5,3.3,3.3,3.4,2.8,3.3,4.2,2.5,3.5,2.7,2.5,3.0,3.9,3.2,3.9,2.7,3.5,2.9,3.0,2.7,3.0,3.5,2.9,3.4,3.4,3.0,3.4,3.4,2.5,2.8,2.3,3.5,3.5,3.4,3.9,3.2,3.7,3.4,2.9,2.7,3.5,2.6,2.5,2.6,3.1,3.0,4.0,3.3,2.8,3.8,3.2,4.3,3.5,2.5,3.8,3.2,3.2,3.0,3.0,2.9,2.9,3.0,3.6,3.6,2.8,3.1,3.1,3.0,3.9,3.5,3.6,3.5,2.6,2.7,3.0,3.1,4.0,2.9,3.0,3.4,3.3,3.8,3.9,3.2,2.3,2.5,3.5,4.0,2.4,4.0,2.7,3.8,3.8,3.4,3.3,3.8,3.5,3.4,2.8,2.7,2.2,4.0,2.8,2.1,3.2,2.5,2.5,3.8,3.1,3.4,3.7,2.9,2.7,4.0,3.4,2.9,3.4,2.9,3.2,3.8,3.6,3.1,2.5,2.8,3.6,3.5,2.0,3.5,3.5,2.5,2.7,3.5,3.1,4.0,3.4,3.4,3.3,2.5,3.1,3.2,3.1,2.5,2.8,3.7,3.6,4.5,3.0,4.0,2.7,3.0,2.8,3.2,3.8,3.5,3.2,3.1,3.2,3.2,3.3,3.3,3.2,3.0,3.0,3.8,2.7,3.7,3.5,2.4,2.9,2.9,2.9,2.8,3.2,3.0,2.6,3.7,3.0,4.0,2.5,3.2,3.6,3.3,2.6,5.5,3.3,2.7,3.3,3.2,3.4,3.5,3.5,3.2,3.3,3.8,3.0,3.0,2.6,3.2,2.9,3.5,3.1,3.0,2.9,3.2,4.3,3.0,3.7,3.5,2.8,3.1,3.0,4.0,2.8,2.6,3.1,3.0,2.9,3.9,3.2,3.5,2.9,3.3,3.8,3.3,3.6,3.6,2.7,3.0,3.8,3.7,4.0,3.3,2.5,2.7,3.0,3.0,2.9,2.9,2.4,2.7,3.3,3.9,2.7,3.5,2.5,3.6,2.6,3.3,3.5,2.6,3.0,3.2,3.3,3.2,3.0,2.7,3.5,2.8,3.4,3.0,2.9,2.9,2.8,3.6,3.4,2.8,3.2,3.3,3.3,2.2,3.5,3.7,3.3,3.1,3.7,2.9,3.2,3.6,3.3,2.7,3.2,3.9,2.7,3.3,3.7,2.1,2.5,2.7,2.7,3.4,3.2,3.4,3.7,2.5,2.9,3.5,3.0,2.5,3.4,3.2,3.6,3.0,3.6,3.1,2.8,3.0,3.6,3.0,2.5,3.2,3.0,3.2,3.1,2.2,3.5,3.3,2.5,3.0,3.4,3.9,3.1,2.1,3.2,2.8,2.8,3.4,3.6,3.5,3.6,4.4,2.6,2.6,2.9,2.7,3.5,3.4,3.2,2.7,3.1,3.0,3.1,3.2,3.1,3.6,3.5,3.2,3.3,3.7,3.2,3.3,3.3,2.9,3.7,4.0,2.4,3.6,3.7,3.4,3.5,3.5,3.1,3.6,2.7,2.7,3.0,2.6,3.3,2.3,4.3,3.1,3.1,3.0,3.7,2.9,3.3,3.5,3.5,3.6,3.0,3.1,3.1,2.2,3.4,3.1,3.7,3.4,3.2,3.6,3.5,2.5,3.0,3.6,2.9,2.5,2.3,3.5,3.2,3.4,3.0,3.2,3.0,3.8,3.7,3.7,3.4,3.4,2.66,3.0,2.8,3.8,3.7,3.3,2.2,3.2,3.2,3.0,3.4,3.6,3.2,3.4,3.8,3.5,3.8,3.4,3.7,2.2,3.6,3.5,3.5,3.5,2.8,3.8,3.5,4.4,3.3,3.7,4.2,3.5,2.5,3.4,3.6,3.4,3.3,3.6,3.1,3.8,3.4,3.4,3.8,3.7,3.2,4.0,3.5,3.3,2.6,3.5,4.1,2.9,3.5,2.9,4.5,4.2,3.3,3.0,3.5,3.3,3.8,3.0,2.4,2.9,2.3,2.4,3.0,2.8,3.7,2.7,3.6,3.7,3.2,3.9,2.4,2.9,2.5,3.5,3.2,3.6,3.2,2.4,3.4,2.6,3.0,3.3,3.7,2.5,3.9,3.2,4.0,3.3,3.9,3.0,2.9,3.3,3.1,3.5,3.2,3.2,3.7,2.3,3.4,3.7,4.5,3.5,2.5,3.0,3.0,2.8,3.4,3.3,3.3,3.0,3.0,3.1,3.2,3.2,2.8,2.7,4.5,3.0,2.7,2.3,3.2,3.2,3.6,3.8,3.1,2.3,3.5,2.7,3.3,3.2,2.2,4.5,3.4,3.6,2.5,2.9,3.5,4.7,2.5,4.8,3.1,2.6,2.9,3.2,3.3,2.5,2.7,3.6,2.7,3.4,3.2,3.1,2.9,3.3,3.4,2.6,3.5,3.0,3.0,2.7,2.9,4.6,3.2,3.7,4.6,3.4,3.5,3.2,3.0,3.5,2.8,3.2,3.1,3.5,2.4,3.4,3.1,3.6,3.7,3.3,2.9,3.3,3.4,3.7,2.9,3.0,3.3,3.1,4.1,3.3,3.0,3.6,3.2,4.1,2.9,3.2,3.1,3.4,2.9,3.9,2.9,3.0,3.5,2.8,3.4,2.6,3.0,4.0,3.0,3.6,3.4,3.4,3.4,4.4,3.0,3.2,2.8,3.6,3.2,2.9,3.3,3.5,3.4,2.7,3.5,2.8,3.6,3.0,3.5,3.5,3.5,3.2,4.2,2.1,3.0,2.4,4.1,2.7,2.2,3.4,3.3,4.1,3.3,4.0,2.0,2.5,2.5,3.0,3.5,3.6,2.9,3.2,3.0,3.6,3.1,3.2,3.3,3.4,2.9,3.3,3.9,2.9,3.6,3.2,3.77,3.4,2.7,3.2,3.5,2.4,3.5,3.7,2.6,4.2,3.2,2.1,2.9,3.6,5.6,2.6,3.2,2.1,3.3,3.5,3.2,3.2,3.8,3.7,3.0,2.7,2.7,3.4,4.2,2.8,3.0,2.9,2.9,3.4,2.5,2.7,3.7,4.0,3.4,3.5,3.5,3.3,2.4,3.2,2.1,3.4,3.9,3.3,3.7,3.5,2.6,3.0,2.6,3.5,3.0,2.2,3.2,2.2,3.6,3.5,3.2,3.3,2.8,3.5,3.7,3.9,2.8,3.4,3.4,3.3,2.4,2.4,2.9,3.1,2.6,3.1,3.0,2.7,3.1,3.1,4.3,4.3,3.5,3.3,3.4,3.2,4.1,3.2,3.5,3.1,3.1,3.4,2.9,3.5,2.5,5.0,3.2,3.4,3.2,3.0,2.6,3.1,2.8,3.2,3.2,3.3,3.4,2.0,3.1,3.6,2.5,2.6,3.2,2.2,3.6,3.1,2.6,3.4,2.7,3.2,2.9,2.6,3.1,3.5,3.7,3.0,2.0,2.6,2.9,3.9,3.5,3.0,3.3,3.5,2.5,3.2,3.0,2.7,4.0,2.9,3.1,4.0,2.7,3.2,3.5,3.4,2.8,2.6,2.7,3.0,3.6,3.6,4.2,3.4,3.4,3.1,2.9,2.7,2.7,3.2,2.9,2.9,2.9,2.8,3.6,4.5,3.2,3.4,3.4,3.3,3.3,3.2,3.0,3.2,3.4,3.0,3.2,2.9,2.8,2.8,3.1,3.2,3.4,3.1,2.9,3.3,3.5,4.2,3.6,3.6,3.0,3.1,3.8,3.5,3.4,3.3,3.9,2.0,3.8,3.5,4.0,3.1,2.6,4.2,3.4,3.5,3.2,3.5,3.1,3.4,3.1,2.8,2.4,2.8,2.5,3.0,3.0,3.9,3.0,2.7,3.1,2.9,3.4,3.5,3.9,3.7,3.3,3.1,2.8,2.7,4.2,2.9,3.6,3.0,3.7,3.4,3.5,3.4,3.4,3.4,3.8,3.4,3.3,2.4,3.0,3.0,3.1,3.4,2.3,3.0,2.4,3.6,4.0,2.0,3.5,3.2,3.8,3.3,3.8,3.0,3.0,3.5,3.4,4.1,3.5,3.1,4.1,3.8,3.5,3.0,2.4,3.5,3.0,3.5,3.9,2.6,3.0,3.4,3.4,2.5,3.4,2.8,2.7,2.8,3.2,3.5,2.7,3.2,3.2,4.0,2.5,3.2,3.2,3.2,3.2,3.2,2.9,3.9,3.2,3.8,2.8,2.0,2.7,3.5,3.0,3.4,3.5,2.7,2.9,3.0,3.5,3.0,2.3,3.3,2.7,3.8,3.5,3.1,3.0,3.1,3.0,2.6,2.0,3.15,2.9,3.1,3.0,2.9,2.9,3.7,3.4,3.2,3.4,3.4,3.5,3.6,3.3,3.0,2.9,3.1,2.9,2.5,3.9,3.2,3.2,2.6,3.4,3.2,3.3,3.6,2.7,3.5,3.0,3.1,2.7,3.7,3.0,3.8,3.4,3.6,3.7,3.8,2.7,2.2,4.0,4.0,3.0,3.6,3.0,2.2,3.1,3.5,2.0,2.8,4.0,3.2,3.5,3.6,2.8,2.6,3.6,3.4,3.4,3.5,3.1,2.5,3.4,3.2,2.8,2.8,3.1,2.9,3.1,3.3,2.6,2.7,3.8,2.8,3.1,3.6,3.4,3.1,2.6,3.5,3.5,2.8,3.2,3.8,4.5,4.4,3.0,3.2,3.1,3.5,2.7,3.2,3.0,2.9,2.7,2.3,2.8,3.0,4.0,2.1,3.2,3.1,3.2,2.7,3.3,3.4,3.3,3.0,3.5,4.1,3.0,3.2,3.1,3.1,3.1,3.3,3.4,3.8,3.2,2.6,3.4,3.0,3.2,3.4,2.9,3.5,3.1,3.0,3.2,2.0,2.2,3.0,2.6,3.0,3.5,3.2,4.5,3.4,3.4,3.0,3.0,3.9,2.7,3.5,2.6,3.9,3.9,3.4,3.0,3.5,3.0,3.1,3.0,2.9,3.0,3.3,2.2,3.3,3.8,3.5,2.5,3.2,3.1,3.6,3.4,3.0,3.6,3.8,3.6,3.6,2.7,3.0,3.1,3.5,3.2,3.2,3.9,2.0,3.0,3.3,3.9,2.9,3.4,3.5,3.6,2.7,3.0,3.3,2.1,2.1,2.1,2.9,3.1,3.5,2.8,3.5,3.6,3.0,3.5,2.4,3.5,3.3,3.2,3.6,3.2,3.2,3.2,3.3,3.3,3.3,3.3,3.0,3.3,3.5,3.8,3.2,2.2,3.2,3.2,3.0,3.8,2.7,3.3,3.8,2.4,3.9,2.9,3.0,3.9,3.0,3.0,3.0,3.0,2.9,2.9,2.9,3.2,3.4,3.8,3.0,3.5,3.6,3.6,2.5,3.1,3.2,3.4,3.0,2.9,3.0,3.4,2.7,3.3,4.5,2.0,3.7,3.1,2.6,3.2,2.8,3.6,4.4,3.9,3.7,3.6,2.8,4.0,2.1,3.8,2.8,3.2,3.2,3.0,3.5,2.0,3.4,2.3,2.3,3.1,3.3,2.3,3.4,4.3,3.4,3.0,2.6,2.7,3.5,2.5,2.7,2.5,2.5,2.5,3.9,2.9,4.0,3.0,3.2,3.1,3.0,2.8,3.0,3.1,3.4,2.3,3.6,2.5,3.8,2.8,2.8,2.4,3.0,2.7,2.3,2.1,3.3,4.2,2.7,2.8,3.4,3.5,3.7,3.6,2.8,3.6,3.4,3.5,2.3,3.8,3.2,3.4,3.1,4.0,2.6,3.9,3.1,3.5,3.2,3.6,2.8,3.0,3.2,3.1,3.2,3.4,3.5,2.5,3.0,2.8,2.9,3.2,2.8,3.3,2.7,3.4,4.6,3.5,2.5,3.3,2.5,3.0,3.6,3.6,4.0,3.1,3.1,2.9,2.7,2.2,2.3,2.5,2.9,3.0,3.6,4.0,2.6,2.0,2.4,3.4,2.6,2.7,3.3,3.6,3.2,2.7,3.7,3.5,2.7,4.4,3.1,3.0,3.4,3.0,3.1,3.9,3.8,3.0,3.0,3.0,3.2,3.5,2.8,2.8,2.9,3.0,2.1,2.4,3.4,3.8,3.2,2.4,2.8,2.7,3.2,3.2,2.7,2.8,3.4,4.0,2.8,3.6,2.7,2.8,3.3,3.1,3.8,3.1,2.5,2.6,3.8,3.8,3.3,3.1,3.2,3.0,2.9,4.1,4.1,2.7,3.4,2.8,3.3,3.1,3.9,2.9,3.2,3.2,3.0,2.5,2.9,3.9,3.3,2.9,3.9,3.3,2.6,3.5,3.1,2.7,3.1,2.9,3.7,3.8,3.0,2.2,3.7,3.6,3.1,3.7,3.0,3.5,3.6,3.4,3.4,3.3,3.5,3.5,3.4,3.3,3.5,3.5,3.4,3.4,3.4,3.5,3.1,3.7,3.5,3.5,3.3,3.5,3.6,2.7,3.0,3.2,3.2,3.3,3.8,4.3,3.3,2.9,3.0,2.7,3.2,3.0,3.2,3.5,3.1,3.5,2.8,3.0,3.2,3.5,3.4,3.9,3.1,3.4,3.5,3.4,3.1,3.2,3.5,2.9,3.4,4.1,3.9,4.1,3.1,3.6,2.0,3.5,3.1,4.3,3.2,2.6,3.5,2.5,3.2,2.0,4.2,3.0,3.0,3.0,3.8,3.3,3.7,3.2,2.2,3.4,3.0,3.7,3.8,3.7,3.5,3.5,3.0,3.5,3.2,3.6,3.1,3.0,3.5,3.5,3.5,3.6,3.0,3.1,2.4,3.0,4.0,3.7,2.2,3.2,2.9,3.9,2.6,2.7,2.9,4.3,3.1,3.0,3.3,3.5,2.8,4.1,3.3,2.1,3.5,2.7,3.5,2.9,3.8,3.0,3.4,3.4,2.2,3.1,3.0,2.7,3.5,3.2,3.0,3.2,3.6,2.7,3.3,3.4,2.9,3.3,2.9,3.0,2.7,3.3,3.5,3.3,3.4,3.0,3.5,3.1,2.6,2.9,3.0,3.6,3.6,2.9,3.5,3.2,3.6,2.3,3.4,3.4,3.1,3.0,3.0,3.5,2.7,3.9,3.4,3.3,3.4,3.1,3.4,2.7,3.1,3.0,3.5,3.4,2.7,4.4,2.9,3.2,2.9,4.0,3.7,3.0,3.1,2.9,3.1,2.9,3.5,2.5,3.6,2.1,2.7,2.8,2.9,3.4,4.0,3.9,2.9,2.5,3.5,2.0,2.9,2.5,3.5,2.5,3.2,3.5,3.2,3.0,3.0,2.0,4.0,2.9,3.5,2.9,3.0,3.0,3.2,4.2,3.0,2.7,3.4,3.8,3.3,2.5,3.0,3.3,3.0,3.0,3.0,3.8,3.1,2.6,3.6,3.3,2.7,3.3,3.5,2.5,3.0,3.3,3.9,2.6,2.3,2.0,2.9,3.6,2.7,3.5,4.0,3.7,2.2,2.7,3.4,3.7,3.7,3.7,3.4,3.6,2.5,3.2,2.9,3.2,5.0,3.5,3.0,3.6,3.2,3.5,3.6,3.5,3.0,3.0,3.3,2.7,3.8,3.7,3.1,2.2,2.3,3.3,3.8,3.1,3.3,3.8,3.2,3.1,3.3,2.3,3.2,3.7,3.5,3.0,3.4,4.2,3.7,3.6,3.1,3.7,2.9,3.8,2.0,3.8,2.0,3.4,3.8,3.5,2.6,3.3,2.7,2.7,2.9,2.6,3.6,3.0,3.2,3.3,2.7,3.5,2.8,3.3,3.2,3.2,3.1,3.4,3.3,3.4,3.2,3.1,2.2,3.8,4.3,3.6,3.0,2.9,4.2,3.3,3.4,3.3,2.7,2.9,3.1,3.4,2.5,3.6,3.5,3.1,3.1,4.2,3.8,4.3,3.6,3.1,2.7,2.5,3.3,3.5,3.0,3.5,3.6,2.7,4.1,2.6,3.5,3.0,2.3,2.6,4.0,3.5,3.3,2.5,2.9,3.5,3.1,3.8,3.3,3.3,3.6,2.5,3.2,3.0,3.5,3.6,2.9,3.4,2.8,3.5,2.7,2.2,3.3,4.3,3.8,2.8,3.1,3.1,3.4,3.0,2.2,4.0,3.4,3.5,4.0,3.3,2.5,3.1,3.2,2.7,2.9,3.6,3.2,3.1,3.6,3.1,3.4,3.0,3.4,3.7,3.2,3.4,3.0,3.6,3.0,3.1,3.2,5.3,3.3,3.3,3.4,2.6,3.0,3.3,3.4,3.0,3.7,3.2,3.2,3.9,3.1,3.1,3.1,3.3,3.1,3.2,3.6,3.3,2.7,3.0,2.3,3.8,3.6,4.5,3.5,3.1,3.9,3.0,3.4,3.0,3.3,3.8,3.0,3.0,4.0,3.0,3.1,2.3,3.1,2.7,3.6,3.1,3.5,3.3,3.0,3.2,3.0,3.1,3.5,2.9,3.2,2.3,3.3,3.2,3.3,3.7,3.3,2.7,2.2,3.4,4.0,3.0,3.0,3.0,2.7,3.0,2.7,3.4,5.3,3.8,3.4,2.2,2.4,2.8,2.5,2.5,3.6,3.1,3.8,3.8,3.1,2.9,2.0,3.5,4.0,3.5,3.3,3.1,3.3,3.4,3.0,4.0,2.6,3.0,3.2,3.0,3.8,2.9,3.5,3.9,3.0,2.8,3.8,3.5,3.2,2.7,3.0,3.2,3.0,2.8,3.1,3.5,3.6,3.9,2.7,3.2,2.8,3.6,2.8,2.7,3.9,3.8,3.1,3.1,3.6,3.4,3.3,2.5,3.6,2.0,3.2,3.0,3.0,3.0,2.5,3.2,3.0,3.5,3.0,2.9,3.4,3.0,3.8,3.7,3.2,3.4,3.5,3.7,3.2,2.2,3.2,3.8,2.7,2.7,3.1,3.4,3.0,3.4,3.5,3.4,2.9,3.6,2.5,2.7,3.6,3.8,2.5,2.7,3.2,3.5,3.0,3.0,3.0,2.3,3.8,3.2,3.1,3.2,3.6,3.0,3.1,3.2,3.0,3.9,3.8,2.8,3.5,3.2,3.2,3.2,3.1,3.3,2.2,3.1,3.3,3.1,3.1,3.0,2.7,2.7,2.5,4.7,3.3,3.5,2.7,3.4,3.9,3.1,3.3,3.0,3.6,2.6,3.7,3.2,3.1,3.6,3.5,2.9,3.4,3.1,2.3,3.2,3.1,3.4,3.2,3.1,3.1,3.1,3.5,3.8,3.0,4.2,3.0,2.7,3.4,3.0,3.2,3.4,3.0,2.5,3.0,2.7,2.9,2.8,2.2,2.7,3.5,3.4,4.3,3.2,3.6,3.5,2.9,3.5,3.0,2.6,3.5,3.2,3.0,3.0,3.0,3.0,3.0,3.4,3.4,2.9,3.9,3.0,3.0,2.7,3.3,3.2,2.7,4.0,3.4,3.1,3.6,3.1,2.8,3.4,3.6,2.7,3.3,3.0,3.2,3.3,3.5,3.8,3.5,3.5,3.8,2.8,3.0,3.0,2.8,2.2,3.0,3.2,2.1,2.1,3.2,3.5,3.53,2.4,3.0,2.7,2.7,3.5,2.8,2.7,3.2,3.7,3.1,3.3,3.9,3.5,3.5,3.6,3.1,3.2,2.8,3.0,3.5,3.8,3.6,3.3,3.3,2.8,3.6,3.2,3.0,2.9,3.8,3.5,3.5,3.4,2.7,2.6,3.0,3.1,3.0,3.2,2.2,3.6,3.6,3.2,3.1,2.7,3.1,3.2,3.0,3.8,3.0,2.0,3.7,3.8,3.2,3.2,3.2,3.2,3.0,2.5,3.3,3.5,3.8,3.1,3.5,3.2,3.2,3.0,2.0,2.8,2.5,3.5,2.8,3.2,2.9,2.1,3.8,3.1,2.5,3.2,2.2,3.7,3.2,2.6,2.9,2.9,3.1,2.4,3.7,4.0,3.0,2.8,2.7,3.6,2.7,3.1,2.9,3.2,3.2,3.1,4.1,3.1,2.9,3.2,3.0,2.7,2.8,2.5,2.6,3.2,3.6,5.5,5.0,3.2,3.8,2.5,3.5,3.6,2.6,3.0,2.8,2.7,3.6,3.3,3.7,2.8,3.1,2.6,2.6,3.2,3.5,2.8,3.0,2.4,3.6,3.2,3.0,3.0,2.5,2.8,2.7,2.9,3.3,3.6,3.1,3.3,3.0,3.0,2.8,2.7,3.2,2.3,3.6,3.6,3.2,3.1,3.2,3.2,3.0,3.3,3.4,2.3,3.2,2.7,3.6,3.7,3.4,2.7,3.5,3.3,2.8,3.3,2.8,2.7,4.1,3.2,3.0,2.2,3.1,3.8,3.4,3.3,2.9,3.1,3.5,3.1,3.7,3.2,3.7,2.6,3.3,2.5,3.1,3.6,3.6,3.8,3.8,3.6,3.5,3.3,3.7,3.5,2.1,3.1,3.3,2.8,3.2,3.3,3.4,4.0,2.8,2.9,3.9,4.5,4.5,3.7,2.1,2.8,3.5,3.3,3.7,3.52,3.0,3.6,2.7,2.2,3.6,2.7,2.5,3.8,3.0,2.8,3.0,2.8,3.5,3.5,3.5,2.5,2.9,3.6,3.5,3.2,3.3,3.0,3.0,3.0,2.8,2.9,3.2,4.1,3.1,3.9,3.9,3.0,2.9,3.3,3.6,3.0,3.1,3.9,3.0,2.2,3.4,3.0,2.3,3.0,3.5,3.1,2.2,3.3,2.9,3.3,3.0,3.8,3.5,3.6,3.7,3.5,3.6,2.4,2.4,3.4,2.8,2.7,3.2,3.0,3.5,2.7,3.4,3.1,3.6,3.2,3.5,2.8,3.7,3.2,3.0,3.8,2.5,3.5,4.0,3.0,3.0,2.6,3.2,3.1,3.9,3.0,3.3,3.4,2.8,3.4,2.8,3.4,2.8,2.5,2.8,3.6,2.5,3.5,3.0,2.6,3.5,2.9,3.8,2.9,3.1,2.4,2.4,2.9,3.3,3.9,2.9,2.1,2.8,2.4,2.8,3.5,3.0,2.2,3.0,4.2,3.0,3.2,3.2,2.5,4.0,2.2,2.5,4.0,2.7,3.4,3.7,3.2,4.3,3.1,2.8,2.8,3.0,2.9,3.5,3.0,3.0,2.5,3.6,3.0,2.5,3.6,2.6,3.2,3.6,2.6,3.1,3.3,3.1,2.5,2.6,3.4,2.7,3.5,3.6,3.4,3.0,3.4,3.0,3.0,3.2,4.1,3.7,3.7,3.0,2.8,3.5,3.4,2.3,3.7,3.7,3.9,3.4,3.4,3.4,3.2,3.4,2.3,2.6,2.5,3.1,3.7,3.5,3.6,2.5,3.4,2.4,3.7,3.2,3.4,3.0,3.8,3.5,3.2,3.1,2.8,3.5,3.2,3.9,3.2,3.3,2.7,2.8,2.6,3.2,2.8,2.8,3.3,3.5,3.1,2.9,3.3,3.0,2.4,2.7,2.0,3.0,3.4,3.7,3.7,2.8,3.1,2.8,3.4,3.0,3.0,3.4,3.6,3.4,3.4,3.8,2.8,3.3,3.9,3.4,3.7,2.5,2.7,3.5,3.2,2.5,3.5,3.2,3.1,3.3,3.1,2.2,3.7,2.8,3.4,2.5,3.5,3.3,3.5,2.8,3.1,7.6,3.2,3.5,3.5,3.9,3.1,3.1,3.7,3.3,3.0,3.9,3.0,3.3,2.9,2.7,3.1,3.7,3.1,3.6,3.2,2.4,3.3,3.2,3.5,3.2,2.5,3.6,3.2,2.6,3.5,3.5,3.0,2.7,3.2,3.1,3.3,3.0,2.7,2.9,3.0,3.2,3.4,3.7,2.5,2.8,3.4,3.1,3.1,2.6,3.7,2.9,3.4,3.5,2.0,3.5,3.5,2.2,2.0,3.4,2.7,2.8,2.8,3.5,3.7,2.7,3.0,2.6,3.0,2.9,3.7,3.3,2.8,3.6,3.7,3.4,3.3,2.5,2.9,2.8,3.6,3.5,3.3,3.5,3.5,2.9,3.0,3.3,3.0,3.4,2.5,2.2,3.4,2.6,3.0,3.2,3.1,2.5,2.7,3.5,3.7,3.0,3.0,2.6,2.9,3.6,2.8,3.0,4.0,3.3,2.8,3.4,2.9,2.9,2.9,2.9,3.4,3.5,3.0,2.4,3.0,3.3,3.1,3.5,3.2,3.2,3.5,4.1,3.7,3.2,3.5,2.8,3.9,3.4,3.5,3.5,3.5,2.5,2.5,2.9,3.6,3.4,3.5,3.2,3.9,3.2,3.1,3.4,4.0,3.5,3.4,3.0,3.2,3.5,2.5,3.3,3.4,3.6,3.1,3.4,3.3,2.9,3.0,2.4,3.5,3.4,3.4,3.5,3.2,2.8,3.5,3.1,3.0,3.2,3.2,3.4,2.2,3.5,3.5,3.4,2.8,2.9,3.0,3.3,2.0,3.6,2.3,3.3,3.2,3.3,3.5,3.3,2.6,3.5,3.7,3.5,3.5,3.5,2.2,3.0,3.0,3.0,3.2,2.5,3.8,2.2,3.4,3.4,3.1,3.1,2.7,2.7,3.1,4.2,2.0,3.9,3.9,3.2,2.1,2.8,3.3,3.8,3.3,3.4,2.4,3.5,3.1,3.4,2.5,3.0,2.9,2.8,2.9,3.5,3.0,3.0,3.1,2.9,3.0,3.3,2.6,3.0,3.0,3.9,3.4,3.2,3.8,3.0,3.3,3.5,3.9,3.0,3.1,3.5,2.8,3.2,3.3,2.7,3.2,3.2,2.9,2.4,3.2,3.5,3.4,3.2,3.4,3.0,2.8,3.8,3.6,3.2,3.4,3.3,3.2,3.4,2.5,3.1,3.4,3.0,3.2,3.7,2.5,3.1,3.4,3.5,3.4,3.0,3.1,3.9,3.1,3.2,3.3,3.4,3.1,2.7,3.0,2.8,2.6,3.2,3.4,3.3,2.5,3.0,3.7,2.9,2.9,3.4,2.8],\"type\":\"box\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}}},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('790b756a-9919-4424-a80e-e7164e32f25d');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['GESTA'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "d9N31HdmSKT3",
        "outputId": "7a2785de-ca8a-41f3-b9e0-c114d0937274"
      },
      "execution_count": 168,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GESTA\n",
              "S/N    2617\n",
              "1      1212\n",
              "2       712\n",
              "3       460\n",
              "4       261\n",
              "5       123\n",
              "6        56\n",
              "7        30\n",
              "N/D      23\n",
              "8        12\n",
              "9         4\n",
              "11        4\n",
              "10        2\n",
              "16        2\n",
              "44        2\n",
              "33        1\n",
              "21        1\n",
              "14        1\n",
              "18        1\n",
              "36        1\n",
              "Name: count, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 168
        }
      ]
    },
    {
      "source": [
        "df['GESTA'] = df['GESTA'].replace(['S/N', 'N/D'], '0')\n",
        "df['GESTA'] = df['GESTA'].fillna('0')\n",
        "df['GESTA'] = df['GESTA'].astype(int)"
      ],
      "cell_type": "code",
      "metadata": {
        "id": "zn8JsMRDTca9"
      },
      "execution_count": 169,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['GESTA'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RQMOnjSkTkU7",
        "outputId": "f8e7b96b-6b6f-4d81-fbf2-13daa3129ee6"
      },
      "execution_count": 170,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GESTA\n",
              "0     2641\n",
              "1     1212\n",
              "2      712\n",
              "3      460\n",
              "4      261\n",
              "5      123\n",
              "6       56\n",
              "7       30\n",
              "8       12\n",
              "11       4\n",
              "9        4\n",
              "16       2\n",
              "44       2\n",
              "10       2\n",
              "21       1\n",
              "14       1\n",
              "18       1\n",
              "36       1\n",
              "33       1\n",
              "Name: count, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 170
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = df[(df['GESTA'] <= 9)]"
      ],
      "metadata": {
        "id": "xnQsy3Z4TAcc"
      },
      "execution_count": 171,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['NACIONALIDAD'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-TbhXIOxTtMj",
        "outputId": "6b9bffcb-387d-43e2-ffe4-2111724d2931"
      },
      "execution_count": 172,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "NACIONALIDAD\n",
              "DOMINICANA    5227\n",
              "HAITIANA       281\n",
              "COLOMBIANA       2\n",
              "VENEZOLANA       1\n",
              "Name: count, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 172
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WTlZOwdhJQvR",
        "outputId": "d4d28353-bd94-4d83-d9e4-0283f10c4d2f"
      },
      "execution_count": 173,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Index: 5511 entries, 0 to 5785\n",
            "Data columns (total 10 columns):\n",
            " #   Column            Non-Null Count  Dtype         \n",
            "---  ------            --------------  -----         \n",
            " 0   FECHA             5511 non-null   datetime64[ns]\n",
            " 1   EDAD              5511 non-null   int64         \n",
            " 2   EDAD GESTACIONAL  5511 non-null   float64       \n",
            " 3   PROCEDIMIENTOS    5511 non-null   object        \n",
            " 4   GEMELAR           5511 non-null   object        \n",
            " 5   VIVI/MUERTO       5511 non-null   object        \n",
            " 6   SEXO              5511 non-null   object        \n",
            " 7   PESO              5511 non-null   float64       \n",
            " 8   GESTA             5511 non-null   int64         \n",
            " 9   NACIONALIDAD      5511 non-null   object        \n",
            "dtypes: datetime64[ns](1), float64(2), int64(2), object(5)\n",
            "memory usage: 473.6+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = df[df['FECHA'].dt.year >= 2019]"
      ],
      "metadata": {
        "id": "-lX-5FWSOhD_"
      },
      "execution_count": 174,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.to_csv('/content/content/MyDrive/0 Colab Notebooks/PORTAFOLIO PERSONAL/PARTOS EN ADOLESCENTES 2019 - 2023/DATASET/PARTOS 2019-2023 terminado.csv', index=False)\n"
      ],
      "metadata": {
        "id": "RtYgDGRqvFUU"
      },
      "execution_count": 175,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#END ETL."
      ],
      "metadata": {
        "id": "hUigDGxFUYWg"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 2. PREDICTIVE MODEL TRAINING PROCESS."
      ],
      "metadata": {
        "id": "saMwM0N0vt_0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 330
        },
        "id": "cn_nLuQPvtvY",
        "outputId": "cf978276-a5b1-48fb-b89f-6590649f1882"
      },
      "execution_count": 176,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       FECHA  EDAD  EDAD GESTACIONAL PROCEDIMIENTOS GEMELAR VIVI/MUERTO SEXO  \\\n",
              "0 2019-01-05    17             38.00        CESAREA      NO        VIVO    F   \n",
              "1 2019-01-06    16             37.00        CESAREA      NO        VIVO    M   \n",
              "2 2019-01-06    19             38.00  PARTO VAGINAL      NO        VIVO    F   \n",
              "3 2019-01-06    16             38.00  PARTO VAGINAL      NO        VIVO    M   \n",
              "4 2019-01-07    18             37.00        CESAREA      NO        VIVO    F   \n",
              "\n",
              "   PESO  GESTA NACIONALIDAD  \n",
              "0  3.10      2   DOMINICANA  \n",
              "1  2.80      1   DOMINICANA  \n",
              "2  2.40      2   DOMINICANA  \n",
              "3  3.90      2   DOMINICANA  \n",
              "4  3.00      2   DOMINICANA  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4116f3eb-335b-4d32-9627-97024310a62d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>FECHA</th>\n",
              "      <th>EDAD</th>\n",
              "      <th>EDAD GESTACIONAL</th>\n",
              "      <th>PROCEDIMIENTOS</th>\n",
              "      <th>GEMELAR</th>\n",
              "      <th>VIVI/MUERTO</th>\n",
              "      <th>SEXO</th>\n",
              "      <th>PESO</th>\n",
              "      <th>GESTA</th>\n",
              "      <th>NACIONALIDAD</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2019-01-05</td>\n",
              "      <td>17</td>\n",
              "      <td>38.00</td>\n",
              "      <td>CESAREA</td>\n",
              "      <td>NO</td>\n",
              "      <td>VIVO</td>\n",
              "      <td>F</td>\n",
              "      <td>3.10</td>\n",
              "      <td>2</td>\n",
              "      <td>DOMINICANA</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2019-01-06</td>\n",
              "      <td>16</td>\n",
              "      <td>37.00</td>\n",
              "      <td>CESAREA</td>\n",
              "      <td>NO</td>\n",
              "      <td>VIVO</td>\n",
              "      <td>M</td>\n",
              "      <td>2.80</td>\n",
              "      <td>1</td>\n",
              "      <td>DOMINICANA</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2019-01-06</td>\n",
              "      <td>19</td>\n",
              "      <td>38.00</td>\n",
              "      <td>PARTO VAGINAL</td>\n",
              "      <td>NO</td>\n",
              "      <td>VIVO</td>\n",
              "      <td>F</td>\n",
              "      <td>2.40</td>\n",
              "      <td>2</td>\n",
              "      <td>DOMINICANA</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2019-01-06</td>\n",
              "      <td>16</td>\n",
              "      <td>38.00</td>\n",
              "      <td>PARTO VAGINAL</td>\n",
              "      <td>NO</td>\n",
              "      <td>VIVO</td>\n",
              "      <td>M</td>\n",
              "      <td>3.90</td>\n",
              "      <td>2</td>\n",
              "      <td>DOMINICANA</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2019-01-07</td>\n",
              "      <td>18</td>\n",
              "      <td>37.00</td>\n",
              "      <td>CESAREA</td>\n",
              "      <td>NO</td>\n",
              "      <td>VIVO</td>\n",
              "      <td>F</td>\n",
              "      <td>3.00</td>\n",
              "      <td>2</td>\n",
              "      <td>DOMINICANA</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4116f3eb-335b-4d32-9627-97024310a62d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4116f3eb-335b-4d32-9627-97024310a62d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4116f3eb-335b-4d32-9627-97024310a62d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1fff9205-df6e-4274-9a08-83890b311a3d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1fff9205-df6e-4274-9a08-83890b311a3d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1fff9205-df6e-4274-9a08-83890b311a3d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 5500,\n  \"fields\": [\n    {\n      \"column\": \"FECHA\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2019-01-05 00:00:00\",\n        \"max\": \"2023-12-27 00:00:00\",\n        \"num_unique_values\": 1279,\n        \"samples\": [\n          \"2023-07-10 00:00:00\",\n          \"2023-08-22 00:00:00\",\n          \"2020-12-02 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"EDAD\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6,\n        \"min\": 11,\n        \"max\": 49,\n        \"num_unique_values\": 37,\n        \"samples\": [\n          36,\n          40,\n          15\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"EDAD GESTACIONAL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.675349988812922,\n        \"min\": 24.0,\n        \"max\": 42.0,\n        \"num_unique_values\": 47,\n        \"samples\": [\n          41.8,\n          37.4,\n          35.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PROCEDIMIENTOS\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"PARTO VAGINAL\",\n          \"CESAREA\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GEMELAR\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"SI\",\n          \"NO\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"VIVI/MUERTO\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"MUERTO\",\n          \"VIVO\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SEXO\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"M\",\n          \"F\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PESO\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4892421230961772,\n        \"min\": 2.0,\n        \"max\": 8.6,\n        \"num_unique_values\": 52,\n        \"samples\": [\n          2.0,\n          3.22\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GESTA\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 9,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          7,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NACIONALIDAD\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"HAITIANA\",\n          \"COLOMBIANA\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 176
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "2.1. Conversion of categorical data to numeric.\n"
      ],
      "metadata": {
        "id": "qJbQhMxlwe5e"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DMeqqxZhxIf1",
        "outputId": "8894c291-4fad-46aa-91a2-391719c2adda"
      },
      "execution_count": 177,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Index: 5500 entries, 0 to 5785\n",
            "Data columns (total 10 columns):\n",
            " #   Column            Non-Null Count  Dtype         \n",
            "---  ------            --------------  -----         \n",
            " 0   FECHA             5500 non-null   datetime64[ns]\n",
            " 1   EDAD              5500 non-null   int64         \n",
            " 2   EDAD GESTACIONAL  5500 non-null   float64       \n",
            " 3   PROCEDIMIENTOS    5500 non-null   object        \n",
            " 4   GEMELAR           5500 non-null   object        \n",
            " 5   VIVI/MUERTO       5500 non-null   object        \n",
            " 6   SEXO              5500 non-null   object        \n",
            " 7   PESO              5500 non-null   float64       \n",
            " 8   GESTA             5500 non-null   int64         \n",
            " 9   NACIONALIDAD      5500 non-null   object        \n",
            "dtypes: datetime64[ns](1), float64(2), int64(2), object(5)\n",
            "memory usage: 472.7+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.insert(1, \"AÃO\", df['FECHA'].dt.year)\n",
        "df.insert(2, \"MES\", df['FECHA'].dt.month)\n",
        "df.insert(3, \"DIA\", df['FECHA'].dt.day)"
      ],
      "metadata": {
        "id": "AloBsPRXxlnU"
      },
      "execution_count": 178,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "le = LabelEncoder()\n",
        "\n",
        "df['PROCEDIMIENTOS'] = le.fit_transform(df['PROCEDIMIENTOS'])\n",
        "\n",
        "df['GEMELAR'] = le.fit_transform(df['GEMELAR'])\n",
        "\n",
        "df['VIVI/MUERTO'] = le.fit_transform(df['VIVI/MUERTO'])\n",
        "\n",
        "df['SEXO'] = le.fit_transform(df['SEXO'])\n",
        "\n",
        "df['NACIONALIDAD'] = le.fit_transform(df['NACIONALIDAD'])\n"
      ],
      "metadata": {
        "id": "1PvFpz_5z19A"
      },
      "execution_count": 179,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = df.drop('FECHA', axis=1)"
      ],
      "metadata": {
        "id": "YOi4q44r1xIZ"
      },
      "execution_count": 180,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 243
        },
        "id": "KKAhXclJ2KDn",
        "outputId": "a326aec3-7770-4b82-f6bd-bafe9e46b6ee"
      },
      "execution_count": 181,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    AÃO  MES  DIA  EDAD  EDAD GESTACIONAL  PROCEDIMIENTOS  GEMELAR  \\\n",
              "0  2019    1    5    17             38.00               0        0   \n",
              "1  2019    1    6    16             37.00               0        0   \n",
              "2  2019    1    6    19             38.00               1        0   \n",
              "3  2019    1    6    16             38.00               1        0   \n",
              "4  2019    1    7    18             37.00               0        0   \n",
              "\n",
              "   VIVI/MUERTO  SEXO  PESO  GESTA  NACIONALIDAD  \n",
              "0            1     0  3.10      2             1  \n",
              "1            1     1  2.80      1             1  \n",
              "2            1     0  2.40      2             1  \n",
              "3            1     1  3.90      2             1  \n",
              "4            1     0  3.00      2             1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5e234c01-eb51-4ccb-b82c-2cb501b6f4ea\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>AÃO</th>\n",
              "      <th>MES</th>\n",
              "      <th>DIA</th>\n",
              "      <th>EDAD</th>\n",
              "      <th>EDAD GESTACIONAL</th>\n",
              "      <th>PROCEDIMIENTOS</th>\n",
              "      <th>GEMELAR</th>\n",
              "      <th>VIVI/MUERTO</th>\n",
              "      <th>SEXO</th>\n",
              "      <th>PESO</th>\n",
              "      <th>GESTA</th>\n",
              "      <th>NACIONALIDAD</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2019</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>17</td>\n",
              "      <td>38.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3.10</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2019</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>16</td>\n",
              "      <td>37.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2.80</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2019</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>19</td>\n",
              "      <td>38.00</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2.40</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2019</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>16</td>\n",
              "      <td>38.00</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3.90</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2019</td>\n",
              "      <td>1</td>\n",
              "      <td>7</td>\n",
              "      <td>18</td>\n",
              "      <td>37.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3.00</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5e234c01-eb51-4ccb-b82c-2cb501b6f4ea')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5e234c01-eb51-4ccb-b82c-2cb501b6f4ea button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5e234c01-eb51-4ccb-b82c-2cb501b6f4ea');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-6c6e9ba4-78c0-4333-bca6-e3d96acc9f7c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6c6e9ba4-78c0-4333-bca6-e3d96acc9f7c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-6c6e9ba4-78c0-4333-bca6-e3d96acc9f7c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 5500,\n  \"fields\": [\n    {\n      \"column\": \"A\\u00d1O\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2020,\n          2023,\n          2021\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MES\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          11,\n          10,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DIA\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 31,\n        \"samples\": [\n          26,\n          24,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"EDAD\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6,\n        \"min\": 11,\n        \"max\": 49,\n        \"num_unique_values\": 37,\n        \"samples\": [\n          36,\n          40,\n          15\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"EDAD GESTACIONAL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.675349988812922,\n        \"min\": 24.0,\n        \"max\": 42.0,\n        \"num_unique_values\": 47,\n        \"samples\": [\n          41.8,\n          37.4,\n          35.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PROCEDIMIENTOS\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GEMELAR\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"VIVI/MUERTO\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SEXO\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PESO\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4892421230961772,\n        \"min\": 2.0,\n        \"max\": 8.6,\n        \"num_unique_values\": 52,\n        \"samples\": [\n          2.0,\n          3.22\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GESTA\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 9,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          7,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NACIONALIDAD\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 181
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = df.rename(columns={'VIVI/MUERTO': 'VIVO'})"
      ],
      "metadata": {
        "id": "rtZsfMAH7efT"
      },
      "execution_count": 182,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = df.drop(['AÃO', 'MES', 'DIA'], axis=1)"
      ],
      "metadata": {
        "id": "M3KLYr2uMAwr"
      },
      "execution_count": 183,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "skkmWNXV2HGP",
        "outputId": "9137f372-2dd1-488f-f0e7-e72c40d26c5c"
      },
      "execution_count": 184,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Index: 5500 entries, 0 to 5785\n",
            "Data columns (total 9 columns):\n",
            " #   Column            Non-Null Count  Dtype  \n",
            "---  ------            --------------  -----  \n",
            " 0   EDAD              5500 non-null   int64  \n",
            " 1   EDAD GESTACIONAL  5500 non-null   float64\n",
            " 2   PROCEDIMIENTOS    5500 non-null   int64  \n",
            " 3   GEMELAR           5500 non-null   int64  \n",
            " 4   VIVO              5500 non-null   int64  \n",
            " 5   SEXO              5500 non-null   int64  \n",
            " 6   PESO              5500 non-null   float64\n",
            " 7   GESTA             5500 non-null   int64  \n",
            " 8   NACIONALIDAD      5500 non-null   int64  \n",
            "dtypes: float64(2), int64(7)\n",
            "memory usage: 429.7 KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "2.2. Proceso de entrenamiento:\n"
      ],
      "metadata": {
        "id": "q9m8dbYI2TMp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "X = df.drop(columns='PROCEDIMIENTOS')\n",
        "y = df.PROCEDIMIENTOS\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state=42)"
      ],
      "metadata": {
        "id": "BE_MHgtD6B2r"
      },
      "execution_count": 185,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Datos de entrenamientos X:\",X_train.shape)\n",
        "print(\"Datos de entrenamientos y:\",y_train.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AotDYPEX6J47",
        "outputId": "472f6a53-89e3-4d1f-a9f1-b700f1948f3c"
      },
      "execution_count": 186,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Datos de entrenamientos X: (4400, 8)\n",
            "Datos de entrenamientos y: (4400,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "lc = LazyClassifier(verbose=False)\n",
        "models, predictions = lc.fit(X_train, X_test, y_train, y_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "H6AYl8xG5cLD",
        "outputId": "b5d44a4f-1f85-490d-c0ac-67e74696da44"
      },
      "execution_count": 187,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|ââââââââââ| 29/29 [00:26<00:00,  1.09it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[LightGBM] [Info] Number of positive: 1954, number of negative: 2446\n",
            "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000345 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 122\n",
            "[LightGBM] [Info] Number of data points in the train set: 4400, number of used features: 8\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.444091 -> initscore=-0.224575\n",
            "[LightGBM] [Info] Start training from score -0.224575\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(models)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4GnS_4Vx5yUV",
        "outputId": "a14aafd4-9083-471b-ab6a-27bf68fa2b9e"
      },
      "execution_count": 188,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                               Accuracy  Balanced Accuracy  ROC AUC  F1 Score  \\\n",
            "Model                                                                           \n",
            "RandomForestClassifier             0.59               0.58     0.58      0.58   \n",
            "NearestCentroid                    0.59               0.57     0.57      0.58   \n",
            "ExtraTreesClassifier               0.58               0.57     0.57      0.58   \n",
            "KNeighborsClassifier               0.58               0.57     0.57      0.58   \n",
            "LGBMClassifier                     0.58               0.56     0.56      0.57   \n",
            "LabelSpreading                     0.57               0.56     0.56      0.57   \n",
            "BaggingClassifier                  0.57               0.56     0.56      0.57   \n",
            "AdaBoostClassifier                 0.59               0.56     0.56      0.55   \n",
            "LabelPropagation                   0.57               0.56     0.56      0.56   \n",
            "XGBClassifier                      0.57               0.56     0.56      0.56   \n",
            "QuadraticDiscriminantAnalysis      0.59               0.55     0.55      0.54   \n",
            "SGDClassifier                      0.58               0.55     0.55      0.55   \n",
            "GaussianNB                         0.58               0.54     0.54      0.51   \n",
            "DecisionTreeClassifier             0.54               0.54     0.54      0.54   \n",
            "BernoulliNB                        0.58               0.54     0.54      0.50   \n",
            "LogisticRegression                 0.58               0.53     0.53      0.48   \n",
            "CalibratedClassifierCV             0.58               0.53     0.53      0.48   \n",
            "RidgeClassifierCV                  0.58               0.53     0.53      0.47   \n",
            "RidgeClassifier                    0.58               0.53     0.53      0.47   \n",
            "LinearSVC                          0.58               0.53     0.53      0.47   \n",
            "LinearDiscriminantAnalysis         0.58               0.53     0.53      0.47   \n",
            "SVC                                0.58               0.53     0.53      0.49   \n",
            "ExtraTreeClassifier                0.54               0.53     0.53      0.54   \n",
            "NuSVC                              0.53               0.51     0.51      0.52   \n",
            "DummyClassifier                    0.56               0.50     0.50      0.40   \n",
            "Perceptron                         0.48               0.50     0.50      0.48   \n",
            "PassiveAggressiveClassifier        0.48               0.48     0.48      0.48   \n",
            "\n",
            "                               Time Taken  \n",
            "Model                                      \n",
            "RandomForestClassifier               1.72  \n",
            "NearestCentroid                      0.07  \n",
            "ExtraTreesClassifier                 1.68  \n",
            "KNeighborsClassifier                 0.38  \n",
            "LGBMClassifier                       0.10  \n",
            "LabelSpreading                       2.27  \n",
            "BaggingClassifier                    0.36  \n",
            "AdaBoostClassifier                   0.52  \n",
            "LabelPropagation                     2.43  \n",
            "XGBClassifier                        1.34  \n",
            "QuadraticDiscriminantAnalysis        0.05  \n",
            "SGDClassifier                        0.13  \n",
            "GaussianNB                           0.06  \n",
            "DecisionTreeClassifier               0.10  \n",
            "BernoulliNB                          0.03  \n",
            "LogisticRegression                   0.04  \n",
            "CalibratedClassifierCV               2.88  \n",
            "RidgeClassifierCV                    0.11  \n",
            "RidgeClassifier                      0.07  \n",
            "LinearSVC                            0.54  \n",
            "LinearDiscriminantAnalysis           0.07  \n",
            "SVC                                  4.38  \n",
            "ExtraTreeClassifier                  0.03  \n",
            "NuSVC                                7.04  \n",
            "DummyClassifier                      0.05  \n",
            "Perceptron                           0.07  \n",
            "PassiveAggressiveClassifier          0.05  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "predictions"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 944
        },
        "id": "nUgMz4OP8-JJ",
        "outputId": "151a91dd-ef9d-42d2-fca3-4b9dbe5368fe"
      },
      "execution_count": 189,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                               Accuracy  Balanced Accuracy  ROC AUC  F1 Score  \\\n",
              "Model                                                                           \n",
              "RandomForestClassifier             0.59               0.58     0.58      0.58   \n",
              "NearestCentroid                    0.59               0.57     0.57      0.58   \n",
              "ExtraTreesClassifier               0.58               0.57     0.57      0.58   \n",
              "KNeighborsClassifier               0.58               0.57     0.57      0.58   \n",
              "LGBMClassifier                     0.58               0.56     0.56      0.57   \n",
              "LabelSpreading                     0.57               0.56     0.56      0.57   \n",
              "BaggingClassifier                  0.57               0.56     0.56      0.57   \n",
              "AdaBoostClassifier                 0.59               0.56     0.56      0.55   \n",
              "LabelPropagation                   0.57               0.56     0.56      0.56   \n",
              "XGBClassifier                      0.57               0.56     0.56      0.56   \n",
              "QuadraticDiscriminantAnalysis      0.59               0.55     0.55      0.54   \n",
              "SGDClassifier                      0.58               0.55     0.55      0.55   \n",
              "GaussianNB                         0.58               0.54     0.54      0.51   \n",
              "DecisionTreeClassifier             0.54               0.54     0.54      0.54   \n",
              "BernoulliNB                        0.58               0.54     0.54      0.50   \n",
              "LogisticRegression                 0.58               0.53     0.53      0.48   \n",
              "CalibratedClassifierCV             0.58               0.53     0.53      0.48   \n",
              "RidgeClassifierCV                  0.58               0.53     0.53      0.47   \n",
              "RidgeClassifier                    0.58               0.53     0.53      0.47   \n",
              "LinearSVC                          0.58               0.53     0.53      0.47   \n",
              "LinearDiscriminantAnalysis         0.58               0.53     0.53      0.47   \n",
              "SVC                                0.58               0.53     0.53      0.49   \n",
              "ExtraTreeClassifier                0.54               0.53     0.53      0.54   \n",
              "NuSVC                              0.53               0.51     0.51      0.52   \n",
              "DummyClassifier                    0.56               0.50     0.50      0.40   \n",
              "Perceptron                         0.48               0.50     0.50      0.48   \n",
              "PassiveAggressiveClassifier        0.48               0.48     0.48      0.48   \n",
              "\n",
              "                               Time Taken  \n",
              "Model                                      \n",
              "RandomForestClassifier               1.72  \n",
              "NearestCentroid                      0.07  \n",
              "ExtraTreesClassifier                 1.68  \n",
              "KNeighborsClassifier                 0.38  \n",
              "LGBMClassifier                       0.10  \n",
              "LabelSpreading                       2.27  \n",
              "BaggingClassifier                    0.36  \n",
              "AdaBoostClassifier                   0.52  \n",
              "LabelPropagation                     2.43  \n",
              "XGBClassifier                        1.34  \n",
              "QuadraticDiscriminantAnalysis        0.05  \n",
              "SGDClassifier                        0.13  \n",
              "GaussianNB                           0.06  \n",
              "DecisionTreeClassifier               0.10  \n",
              "BernoulliNB                          0.03  \n",
              "LogisticRegression                   0.04  \n",
              "CalibratedClassifierCV               2.88  \n",
              "RidgeClassifierCV                    0.11  \n",
              "RidgeClassifier                      0.07  \n",
              "LinearSVC                            0.54  \n",
              "LinearDiscriminantAnalysis           0.07  \n",
              "SVC                                  4.38  \n",
              "ExtraTreeClassifier                  0.03  \n",
              "NuSVC                                7.04  \n",
              "DummyClassifier                      0.05  \n",
              "Perceptron                           0.07  \n",
              "PassiveAggressiveClassifier          0.05  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-06bacf7d-593f-43b5-806e-0bab0378eb58\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Accuracy</th>\n",
              "      <th>Balanced Accuracy</th>\n",
              "      <th>ROC AUC</th>\n",
              "      <th>F1 Score</th>\n",
              "      <th>Time Taken</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Model</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>RandomForestClassifier</th>\n",
              "      <td>0.59</td>\n",
              "      <td>0.58</td>\n",
              "      <td>0.58</td>\n",
              "      <td>0.58</td>\n",
              "      <td>1.72</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>NearestCentroid</th>\n",
              "      <td>0.59</td>\n",
              "      <td>0.57</td>\n",
              "      <td>0.57</td>\n",
              "      <td>0.58</td>\n",
              "      <td>0.07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ExtraTreesClassifier</th>\n",
              "      <td>0.58</td>\n",
              "      <td>0.57</td>\n",
              "      <td>0.57</td>\n",
              "      <td>0.58</td>\n",
              "      <td>1.68</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>KNeighborsClassifier</th>\n",
              "      <td>0.58</td>\n",
              "      <td>0.57</td>\n",
              "      <td>0.57</td>\n",
              "      <td>0.58</td>\n",
              "      <td>0.38</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>LGBMClassifier</th>\n",
              "      <td>0.58</td>\n",
              "      <td>0.56</td>\n",
              "      <td>0.56</td>\n",
              "      <td>0.57</td>\n",
              "      <td>0.10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>LabelSpreading</th>\n",
              "      <td>0.57</td>\n",
              "      <td>0.56</td>\n",
              "      <td>0.56</td>\n",
              "      <td>0.57</td>\n",
              "      <td>2.27</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>BaggingClassifier</th>\n",
              "      <td>0.57</td>\n",
              "      <td>0.56</td>\n",
              "      <td>0.56</td>\n",
              "      <td>0.57</td>\n",
              "      <td>0.36</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>AdaBoostClassifier</th>\n",
              "      <td>0.59</td>\n",
              "      <td>0.56</td>\n",
              "      <td>0.56</td>\n",
              "      <td>0.55</td>\n",
              "      <td>0.52</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>LabelPropagation</th>\n",
              "      <td>0.57</td>\n",
              "      <td>0.56</td>\n",
              "      <td>0.56</td>\n",
              "      <td>0.56</td>\n",
              "      <td>2.43</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>XGBClassifier</th>\n",
              "      <td>0.57</td>\n",
              "      <td>0.56</td>\n",
              "      <td>0.56</td>\n",
              "      <td>0.56</td>\n",
              "      <td>1.34</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>QuadraticDiscriminantAnalysis</th>\n",
              "      <td>0.59</td>\n",
              "      <td>0.55</td>\n",
              "      <td>0.55</td>\n",
              "      <td>0.54</td>\n",
              "      <td>0.05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>SGDClassifier</th>\n",
              "      <td>0.58</td>\n",
              "      <td>0.55</td>\n",
              "      <td>0.55</td>\n",
              "      <td>0.55</td>\n",
              "      <td>0.13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>GaussianNB</th>\n",
              "      <td>0.58</td>\n",
              "      <td>0.54</td>\n",
              "      <td>0.54</td>\n",
              "      <td>0.51</td>\n",
              "      <td>0.06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>DecisionTreeClassifier</th>\n",
              "      <td>0.54</td>\n",
              "      <td>0.54</td>\n",
              "      <td>0.54</td>\n",
              "      <td>0.54</td>\n",
              "      <td>0.10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>BernoulliNB</th>\n",
              "      <td>0.58</td>\n",
              "      <td>0.54</td>\n",
              "      <td>0.54</td>\n",
              "      <td>0.50</td>\n",
              "      <td>0.03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>LogisticRegression</th>\n",
              "      <td>0.58</td>\n",
              "      <td>0.53</td>\n",
              "      <td>0.53</td>\n",
              "      <td>0.48</td>\n",
              "      <td>0.04</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>CalibratedClassifierCV</th>\n",
              "      <td>0.58</td>\n",
              "      <td>0.53</td>\n",
              "      <td>0.53</td>\n",
              "      <td>0.48</td>\n",
              "      <td>2.88</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>RidgeClassifierCV</th>\n",
              "      <td>0.58</td>\n",
              "      <td>0.53</td>\n",
              "      <td>0.53</td>\n",
              "      <td>0.47</td>\n",
              "      <td>0.11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>RidgeClassifier</th>\n",
              "      <td>0.58</td>\n",
              "      <td>0.53</td>\n",
              "      <td>0.53</td>\n",
              "      <td>0.47</td>\n",
              "      <td>0.07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>LinearSVC</th>\n",
              "      <td>0.58</td>\n",
              "      <td>0.53</td>\n",
              "      <td>0.53</td>\n",
              "      <td>0.47</td>\n",
              "      <td>0.54</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>LinearDiscriminantAnalysis</th>\n",
              "      <td>0.58</td>\n",
              "      <td>0.53</td>\n",
              "      <td>0.53</td>\n",
              "      <td>0.47</td>\n",
              "      <td>0.07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>SVC</th>\n",
              "      <td>0.58</td>\n",
              "      <td>0.53</td>\n",
              "      <td>0.53</td>\n",
              "      <td>0.49</td>\n",
              "      <td>4.38</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ExtraTreeClassifier</th>\n",
              "      <td>0.54</td>\n",
              "      <td>0.53</td>\n",
              "      <td>0.53</td>\n",
              "      <td>0.54</td>\n",
              "      <td>0.03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>NuSVC</th>\n",
              "      <td>0.53</td>\n",
              "      <td>0.51</td>\n",
              "      <td>0.51</td>\n",
              "      <td>0.52</td>\n",
              "      <td>7.04</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>DummyClassifier</th>\n",
              "      <td>0.56</td>\n",
              "      <td>0.50</td>\n",
              "      <td>0.50</td>\n",
              "      <td>0.40</td>\n",
              "      <td>0.05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Perceptron</th>\n",
              "      <td>0.48</td>\n",
              "      <td>0.50</td>\n",
              "      <td>0.50</td>\n",
              "      <td>0.48</td>\n",
              "      <td>0.07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>PassiveAggressiveClassifier</th>\n",
              "      <td>0.48</td>\n",
              "      <td>0.48</td>\n",
              "      <td>0.48</td>\n",
              "      <td>0.48</td>\n",
              "      <td>0.05</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-06bacf7d-593f-43b5-806e-0bab0378eb58')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-06bacf7d-593f-43b5-806e-0bab0378eb58 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-06bacf7d-593f-43b5-806e-0bab0378eb58');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f43b4caa-818b-4cc8-93ec-e3c5b32e84c8\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f43b4caa-818b-4cc8-93ec-e3c5b32e84c8')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f43b4caa-818b-4cc8-93ec-e3c5b32e84c8 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_8132d35c-c331-4ff6-8cf0-44741f07ed05\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('models')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_8132d35c-c331-4ff6-8cf0-44741f07ed05 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('models');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "models",
              "summary": "{\n  \"name\": \"models\",\n  \"rows\": 27,\n  \"fields\": [\n    {\n      \"column\": \"Model\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 27,\n        \"samples\": [\n          \"LabelPropagation\",\n          \"DecisionTreeClassifier\",\n          \"XGBClassifier\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Accuracy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.028812405206630306,\n        \"min\": 0.4818181818181818,\n        \"max\": 0.59,\n        \"num_unique_values\": 19,\n        \"samples\": [\n          0.5881818181818181,\n          0.5718181818181818,\n          0.5781818181818181\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Balanced Accuracy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.023464623218490986,\n        \"min\": 0.4844905175184828,\n        \"max\": 0.5773799957141327,\n        \"num_unique_values\": 23,\n        \"samples\": [\n          0.5346686488803172,\n          0.5551872388299582,\n          0.5773799957141327\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ROC AUC\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.023464623218490993,\n        \"min\": 0.4844905175184828,\n        \"max\": 0.5773799957141327,\n        \"num_unique_values\": 23,\n        \"samples\": [\n          0.5346686488803172,\n          0.5551872388299582,\n          0.5773799957141327\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"F1 Score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.04831547729324953,\n        \"min\": 0.3977740016992354,\n        \"max\": 0.5849041721180427,\n        \"num_unique_values\": 23,\n        \"samples\": [\n          0.47554062038983913,\n          0.5624050992395317,\n          0.5849041721180427\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Time Taken\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.6452872454202727,\n        \"min\": 0.031107187271118164,\n        \"max\": 7.041740417480469,\n        \"num_unique_values\": 27,\n        \"samples\": [\n          2.4253807067871094,\n          0.10455179214477539,\n          1.3432836532592773\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 189
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "rfc = RandomForestClassifier(random_state=42)\n",
        "rfc.get_params()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0-PpaZCn9RmY",
        "outputId": "de5c30ba-1f04-4e56-d285-da84e82f9b4c"
      },
      "execution_count": 190,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'bootstrap': True,\n",
              " 'ccp_alpha': 0.0,\n",
              " 'class_weight': None,\n",
              " 'criterion': 'gini',\n",
              " 'max_depth': None,\n",
              " 'max_features': 'sqrt',\n",
              " 'max_leaf_nodes': None,\n",
              " 'max_samples': None,\n",
              " 'min_impurity_decrease': 0.0,\n",
              " 'min_samples_leaf': 1,\n",
              " 'min_samples_split': 2,\n",
              " 'min_weight_fraction_leaf': 0.0,\n",
              " 'n_estimators': 100,\n",
              " 'n_jobs': None,\n",
              " 'oob_score': False,\n",
              " 'random_state': 42,\n",
              " 'verbose': 0,\n",
              " 'warm_start': False}"
            ]
          },
          "metadata": {},
          "execution_count": 190
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "rfc.fit(X_train,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 74
        },
        "id": "TiydKrOJ9c1_",
        "outputId": "479b4019-70a5-4907-e4b4-35492b9d7fad"
      },
      "execution_count": 191,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestClassifier(random_state=42)"
            ],
            "text/html": [
              "<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"â¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â¾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(random_state=42)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 191
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred = rfc.predict(X_test)"
      ],
      "metadata": {
        "id": "OEIDqc239eZZ"
      },
      "execution_count": 192,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "rf_train_score = rfc.score(X_train, y_train)\n",
        "rf_test_score = rfc.score(X_test, y_test)\n",
        "\n",
        "print('Rendimiento del modelo en datos de entrenamientos',rf_train_score)\n",
        "print('Rendimiento del modelo en datos de prueba',rf_test_score)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0rb5Odxl9a_A",
        "outputId": "37f81179-fa38-4fee-9c3e-f437c77ed41b"
      },
      "execution_count": 193,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Rendimiento del modelo en datos de entrenamientos 0.915\n",
            "Rendimiento del modelo en datos de prueba 0.5854545454545454\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Classification report:\\n\\n\", classification_report(y_test,y_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "B7nETkFL9VXQ",
        "outputId": "cee56235-2f51-4011-f27e-25725f50aa23"
      },
      "execution_count": 194,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Classification report:\n",
            "\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.62      0.67      0.64       612\n",
            "           1       0.54      0.48      0.51       488\n",
            "\n",
            "    accuracy                           0.59      1100\n",
            "   macro avg       0.58      0.58      0.58      1100\n",
            "weighted avg       0.58      0.59      0.58      1100\n",
            "\n"
          ]
        }
      ]
    }
  ]
}
